# SPDX-FileCopyrightText: Â© 2024 Tenstorrent AI ULC

# SPDX-License-Identifier: Apache-2.0

"""
Script to extract the MLIR model generated from `ttrt read --section mlir`.
"""

import sys
import json


def extract_mlir(input_file, output_file):
    """
    Extract the MLIR model from output of `ttrt read --section mlir`.

    Args:
        input_file: Path to the input file generated by `ttrt read --section mlir`.
        output_file: Path to write the cleaned MLIR output.

    Returns:
        bool: True if MLIR extraction was successful, False otherwise.

    Raises:
        FileNotFoundError: When the input file does not exist.
        json.JSONDecodeError: When the input file is not valid JSON.
        KeyError: When the expected JSON structure is not found.
        IndexError: When the JSON array structure is unexpected.
        IOError: When there are issues reading from or writing to files.

    Examples:
        Extract MLIR from a JSON file to a .mlir file:
        >>> extract_mlir("model_output.json", "model.mlir")
        Successfully extracted MLIR to model.mlir
        True
    """
    try:
        with open(input_file, "r") as f:
            content = json.load(f)

        mlir_content = content[0][0]["source"]

        # Replace escaped characters
        # Replace \n with actual newlines
        mlir_content = mlir_content.replace("\\n", "\n")
        # Replace \" with actual quotes
        mlir_content = mlir_content.replace('\\"', '"')

        # Write the cleaned MLIR to output file
        with open(output_file, "w") as f:
            f.write(mlir_content)

        print(f"Successfully extracted MLIR to {output_file}")
        return True

    except FileNotFoundError:
        print(f"Error: Input file '{input_file}' not found")
        return False
    except json.JSONDecodeError as e:
        print(f"Error: Invalid JSON format in '{input_file}': {e}")
        return False
    except (KeyError, IndexError) as e:
        print(f"Error: Unexpected JSON structure in '{input_file}': {e}")
        return False
    except IOError as e:
        print(f"Error: IO operation failed: {e}")
        return False
    except Exception as e:
        print(f"Error processing file: {e}")
        return False


def main():
    if len(sys.argv) < 2:
        print("Usage: python extract_mlir.py <input_file> [output_file]")
        print("If output_file is not specified, will use 'extracted.mlir'")
        sys.exit(1)

    input_file = sys.argv[1]
    output_file = sys.argv[2] if len(sys.argv) > 2 else "extracted.mlir"

    if extract_mlir(input_file, output_file):
        sys.exit(0)
    else:
        sys.exit(1)


if __name__ == "__main__":
    main()
