
name: "Create docs"
description: "Creates a release doc for all frontend and cats them to one single file"
inputs:
  repo_short:
    description: "Repo's short name"
    required: true
    type: string
  workflow_job_json:
    description: ""
    required: true
    type: string
  latest_commit:
    description: ""
    required: false
    type: string
  new_version_tag:
    description: ""
    required: true
    type: string
  current_release_tag_commit:
    description: ""
    required: false
    type: string
  release_type:
    description: "Release type"
    required: true
    type: string
  major_version:
    description: "Major version"
    required: true
    type: string
  minor_version:
    description: "Minor version"
    required: true
    type: string
  pip_wheel_names:
    description: "Names of pip wheels"
    required: true
    type: string
  skip_docker_build:
    description: "Skip docker build instructions"
    required: false
    type: boolean
  make_latest:
    description: "Make latest"
    required: false
    type: boolean

runs:
  using: "composite"
  steps:
    - name: Get tags
      id: get-tags
      shell: bash
      run: |
        new_version="${{ inputs.latest_commit }}"
        old_version="${{ inputs.current_release_tag_commit }}"

        if [[ -z "${old_version}" ]]; then
          old_version="${{ inputs.latest_commit }}"
        fi

        ## TODO: Add Logic here to compare current stable release to latest stable release. First stable will compare to RC

        if [[ "${{ inputs.release_type }}" == "nightly" ]]; then
          old_version="${{ inputs.major_version }}.${{ inputs.minor_version }}.0.dev$(date -d "24 hours ago" '+%Y%m%d')"
        fi
        echo "old_version=$old_version" >> $GITHUB_OUTPUT
        echo "new_version=$new_version" >> $GITHUB_OUTPUT
    - name: Build Changelog
      id: github_release
      uses: mikepenz/release-changelog-builder-action@v5
      with:
        owner: tenstorrent
        repo: ${{ inputs.repo_short }}
        fromTag: ${{ steps.get-tags.outputs.old_version }}
        toTag: ${{ steps.get-tags.outputs.new_version }}
        fetchViaCommits: true
        fetchReleaseInformation: true
        fetchReviewers: true
        fetchReviews: true
        failOnError: true
        mode: "COMMIT"
        configurationJson: |
          {
            "template": "#{{CHANGELOG}}",
            "categories": [
              {
                "title": "## üöÄ Features",
                "labels": ["feature", "enhancement"]
              },
              {
                "title": "## üõ† Fixes",
                "labels": ["fix", "bug"]
              },
              {
                "title": "## üßπ Maintenance",
                "labels": ["chore", "refactor", "cleanup"]
              },
              {
                "title": "## üì¶ Build",
                "labels": ["build", "ci"]
              },
              {
                "title": "## üìù Documentation",
                "labels": ["docs"]
              },
              {
                "title": "## ‚ö°Ô∏è Performance Improvements",
                "labels": ["perf"]
              },
              {
                "title": "## üß™ Tests",
                "labels": ["test"]
              },
              {
                "title": "## ‚è™ Reverts",
                "labels": ["revert"]
              },
              {
                "title": "## üé® Styling",
                "labels": ["style"]
              },
              {
                "title": "## üéØ Other Changes",
                "labels": []
              }
            ],
            "label_extractor": [
              {
                "pattern": "^(build|chore|ci|docs|feature|enhancement|fix|bug|perf|cleanup|refactor|revert|style|test){1}(\\([\\w\\-\\.]+\\))?(!)?: ([\\w ])+([\\s\\S]*)",
                "target": "$1"
              }
            ],
            "pr_template": "- [#{{TITLE}}](https://github.com/tenstorrent/${{ inputs.repo_short }}/commit/#{{MERGE_SHA}}) by @#{{AUTHOR}}"
          }

    - name: output readme
      shell: bash
      run: |
        readme_path="${{ github.workspace }}/release/docs"
        mkdir -p $readme_path

        new_version_tag="${{ inputs.new_version_tag }}"

        # Generate pip install instructions

        pip_install_instructions=""
        pip_wheel_names="${{ inputs.pip_wheel_names }}"
        for wheel_name in $pip_wheel_names; do
            if [[ "${{ inputs.make_latest }}" == "true" ]]; then
                pip_install_instructions+="pip install $wheel_name==${{ inputs.new_version_tag }} --extra-index-url https://pypi.eng.aws.tenstorrent.com/<br>"
            else
                pip_install_instructions+="pip install $wheel_name==${{ inputs.new_version_tag }} --pre --extra-index-url https://pypi.eng.aws.tenstorrent.com/<br>"
            fi
        done

        found_files=$(find ${{ github.workspace }}/release/artifacts -type f -exec basename {} \;)
        download_list_files=$( echo "$found_files" | sed "s/.*/<li>&/g" | xargs |  tr -d ' ')

        echo "found_files=$found_files"
        echo "download_list_files=$download_list_files"
        echo "pip_install_instructions=$pip_install_instructions"
        docker_instructions="ghcr.io/tenstorrent/${{ inputs.repo_short }}-slim:${{ inputs.new_version_tag }}<br>"
        docker_instructions+="<br>More detailed instructions can be found in the [Getting Started](https://docs.tenstorrent.com/${{ inputs.repo_short }}) docker section<br>"
        echo "docker_instructions=$docker_instructions"

        if [[ "${{ inputs.skip_docker_build }}" == "true" ]]; then
        cat <<- EOF >> "$readme_path/readme"
        :green_book: [Getting started](https://docs.tenstorrent.com/${{ inputs.repo_short }})
        #### Install via pip
          $pip_install_instructions
        #### Test status: ${{ fromJson(inputs.workflow_job_json).run-status-symbol }}
        #### Workflow run: ${{ fromJson(inputs.workflow_job_json).run-url }}
        ${{ steps.github_release.outputs.changelog }}
        #### Files:
          $download_list_files
        EOF

        else

        cat <<- EOF >> "$readme_path/readme"
        :green_book: [Getting started](https://docs.tenstorrent.com/${{ inputs.repo_short }})
        #### Install via pip
          $pip_install_instructions
        #### Docker container
          $docker_instructions
        #### Test status: ${{ fromJson(inputs.workflow_job_json).run-status-symbol }}
        #### Workflow run: ${{ fromJson(inputs.workflow_job_json).run-url }}
        ${{ steps.github_release.outputs.changelog }}
        #### Files:
          $download_list_files
        EOF

        fi
