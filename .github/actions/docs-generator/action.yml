
name: "Create docs"
description: "Creates a release doc for all frontend and cats them to one single file"
inputs:
  repo_short:
    description: "Repo's short name"
    required: true
    type: string
  repo_full:
    description: "Repo's full name"
    required: true
    type: string
  workflow_job_json:
    description: ""
    required: true
    type: string
  latest_commit:
    description: ""
    required: false
    type: string
  new_version_tag:
    description: ""
    required: true
    type: string
  release_type:
    description: "Release type"
    required: true
    type: string
  pip_wheel_names:
    description: "Names of pip wheels"
    required: true
    type: string
  skip_docker_build:
    description: "Skip docker build instructions"
    required: false
    type: boolean
  make_latest:
    description: "Make latest"
    required: false
    type: boolean
  workflow_run_status_symbol:
    description: "Run status symbol"
    required: false
    type: string
  workflow_run_url:
    description: "Run URL"
    required: false
    type: string
  git_log_fail_on_error:
    description: "Fail on error"
    required: true
    type: boolean
    default: true
  docker_basic_test_run_url:
    description: "Docker Basic test run URL"
    required: false
    type: string
  docker_demo_test_run_url:
    description: "Docker Demo test run URL"
    required: false
    type: string

runs:
  using: "composite"
  steps:
    - name: Get current tags
      id: get-tags
      shell: bash
      run: |
        new_version="${{ inputs.latest_commit }}"
        new_version_tag="${{ inputs.new_version_tag }}"

        get_latest_nightly_prelease() {
          echo "Get nightly pre-release version for release type: ${{ inputs.release_type }}"
          current_version=$(gh release list -L 50 --repo ${{ inputs.repo_full }} --json tagName,isPrerelease,isDraft | jq -rc '[.[] | select(.isPrerelease==true and .isDraft==false) | select(.tagName | contains(".dev"))] | first | .tagName')
        }
        get_latest_rc_prelease() {
          echo "Get rc pre-release version for release type: ${{ inputs.release_type }}"
          current_version=$(gh release list -L 50 --repo ${{ inputs.repo_full }} --json tagName,isPrerelease,isDraft | jq -rc '[.[] | select(.isPrerelease==true and .isDraft==false) | select(.tagName | contains("rc"))] | first | .tagName')
        }

        get_latest_stable_released() {
          echo "Get latest released version for release type: ${{ inputs.release_type }}"
          set +e
          current_version=$(gh release list -R ${{ inputs.repo_full }} -L 50 --json isLatest,tagName | jq -rc '[.[] | select(.isLatest==true)] | first | .tagName')
          set -e
        }

        if [[ "${{ inputs.release_type }}" == "stable" ]]; then
          get_latest_stable_released

          # If there is no latest stable version, use the latest nightly pre-release version
          if [[ "$current_version" == "null" ]]; then
            get_latest_nightly_prelease
          fi

        elif [[ "${{ inputs.release_type }}" == "rc" ]]; then

          set +e
          check_rc_initial_release=$(echo "$new_version_tag" | grep -q "rc1" && echo "true" || echo "false")
          echo "check_rc_initial_release=$check_rc_initial_release"
          set -e

          # If the tag is a new rc release, use the latest stable release
          if [[ "$check_rc_initial_release" == "true" ]]; then
            get_latest_stable_released
          else
            # If there is a existing rc release, use the latest rc release
            get_latest_rc_prelease
          fi

          # If nothing can be found, use the latest nightly pre-release version
          if [[ "$current_version" == "null" ]]; then
            get_latest_nightly_prelease
          fi

        else
          # Assuming nightly pre-release
          get_latest_nightly_prelease
        fi

        echo "current_version=$current_version"
        echo "new_version=$new_version"

        echo "current_version=$current_version" >> $GITHUB_OUTPUT
        echo "new_version=$new_version" >> $GITHUB_OUTPUT

    - name: Create model compatible table
      if: ${{ steps.set-release-facts.outputs.skip_model_compatible_table == 'false' }}
      working-directory: ./.github/scripts/model-compatible-table
      env:
        XML_ROOT: ${{ github.workspace }}/release/artifacts
        FILE_OUTPUT: ${{ github.workspace }}/release/docs/readme_hardware_table.md
        URL_SHAS: '{"${{ inputs.repo }}": "${{ inputs.latest_commit }}"}'
      shell: bash
      run: |
        readme_path="${{ github.workspace }}/release/docs"
        mkdir -p $readme_path
        python3 -m venv venv
        source venv/bin/activate
        pip install -r requirements.txt
        python main.py
        # Clean up XML files
        find ${{ github.workspace }}/release/artifacts -type f -iname "*.xml" -delete

    - name: Build Changelog
      id: github_release
      uses: mikepenz/release-changelog-builder-action@v5
      with:
        owner: tenstorrent
        repo: ${{ inputs.repo_short }}
        fromTag: ${{ steps.get-tags.outputs.current_version }}
        toTag: ${{ steps.get-tags.outputs.new_version }}
        fetchViaCommits: true
        fetchReleaseInformation: true
        fetchReviewers: true
        fetchReviews: true
        failOnError: ${{ inputs.git_log_fail_on_error }}
        mode: "COMMIT"
        configurationJson: |
          {
            "template": "#{{CHANGELOG}}",
            "categories": [
              {
                "title": "## üöÄ Features",
                "labels": ["feature", "enhancement"]
              },
              {
                "title": "## üõ† Fixes",
                "labels": ["fix", "bug"]
              },
              {
                "title": "## üßπ Maintenance",
                "labels": ["chore", "refactor", "cleanup"]
              },
              {
                "title": "## üì¶ Build",
                "labels": ["build", "ci"]
              },
              {
                "title": "## üìù Documentation",
                "labels": ["docs"]
              },
              {
                "title": "## ‚ö°Ô∏è Performance Improvements",
                "labels": ["perf"]
              },
              {
                "title": "## üß™ Tests",
                "labels": ["test"]
              },
              {
                "title": "## ‚è™ Reverts",
                "labels": ["revert"]
              },
              {
                "title": "## üé® Styling",
                "labels": ["style"]
              },
              {
                "title": "## üéØ Other Changes",
                "labels": []
              }
            ],
            "label_extractor": [
              {
                "pattern": "^(build|chore|ci|docs|feature|enhancement|fix|bug|perf|cleanup|refactor|revert|style|test){1}(\\([\\w\\-\\.]+\\))?(!)?: ([\\w ])+([\\s\\S]*)",
                "target": "$1"
              }
            ],
            "pr_template": "- [#{{TITLE}}](https://github.com/tenstorrent/${{ inputs.repo_short }}/commit/#{{MERGE_SHA}}) by @#{{AUTHOR}}"
          }

    - name: output readme
      shell: bash
      run: |
        readme_path="${{ github.workspace }}/release/docs"
        mkdir -p $readme_path

        new_version_tag="${{ inputs.new_version_tag }}"

        # Generate pip install instructions

        pip_install_instructions=""
        pip_wheel_names="${{ inputs.pip_wheel_names }}"
        for wheel_name in $pip_wheel_names; do
            if [[ "${{ inputs.make_latest }}" == "true" ]]; then
                pip_install_instructions+="pip install $wheel_name==${{ inputs.new_version_tag }} --extra-index-url https://pypi.eng.aws.tenstorrent.com/<br>"
            else
                pip_install_instructions+="pip install $wheel_name==${{ inputs.new_version_tag }} --pre --extra-index-url https://pypi.eng.aws.tenstorrent.com/<br>"
            fi
        done

        echo "pip_install_instructions=$pip_install_instructions"
        # Generate Docker instructions

        docker_instructions="docker pull ghcr.io/tenstorrent/${{ inputs.repo_short }}-slim:${{ inputs.new_version_tag }}<br>"
        docker_instructions+="<br>More detailed instructions can be found in the [Getting Started](https://docs.tenstorrent.com/${{ inputs.repo_short }}) docker section<br>"
        echo "docker_instructions=$docker_instructions"

        if [[ "${{ inputs.skip_docker_build }}" == "true" ]]; then
        cat <<- EOF >> "$readme_path/readme"
        :green_book: [Getting started](https://docs.tenstorrent.com/${{ inputs.repo_short }})
        #### Install via pip
          $pip_install_instructions
        #### Tests:
        - Workflow:
          - Run link: ${{ inputs.workflow_run_url }}
          - Status: ${{ inputs.workflow_run_status_symbol }}
        ${{ steps.github_release.outputs.changelog }}
        EOF

        else

        cat <<- EOF >> "$readme_path/readme"
        :green_book: [Getting started](https://docs.tenstorrent.com/${{ inputs.repo_short }})
        #### Install via pip
          $pip_install_instructions
        #### Docker container
          $docker_instructions
        #### Tests:
        - Workflow:
          - Run link: ${{ inputs.workflow_run_url }}
          - Status: ${{ inputs.workflow_run_status_symbol }}
        - Docker:
          - Basic: ${{ inputs.docker_basic_test_run_url }}
          - Demo: ${{ inputs.docker_demo_test_run_url }}
        ${{ steps.github_release.outputs.changelog }}
        EOF

        fi

    - name: doc helper
      shell: bash
      id: doc_helper
      run: |
        # Used to add model compatible table to readme at the bottom of the document
        if [[ -f ${{ github.workspace }}/release/docs/readme_hardware_table.md ]]; then
          cat ${{ github.workspace }}/release/docs/readme_hardware_table.md >> ${{ github.workspace }}/release/docs/readme
        fi
