
name: "Find workflow candidate"
description: "Find workflow candidate"
inputs:
  repo:
    description: "Repo name"
    required: true
  branch:
    description: "Branch name"
    default: "main"
    required: false
  commit:
    description: "Commit sha"
    required: false
    default: ""
  workflow:
    description: "Workflow name"
    required: true
  workflow_allow_failed:
    description: "Return run even if workflow has failed"
    required: false
  workflow_result_in_job:
    description: "Set that workflow result is job result"
    default: ""
    required: false
  ignore_artifacts:
    description: "Ignore artifacts"
    default: false
    required: false
  override_release_fact_workflow:
    description: "Override release facts workflow"
    default: false
    required: false

outputs:
  run-status-symbol:
    description: 'Workflow run unicode symbol'
    value: ${{ steps.fetch_run_id.outputs.run_status_symbol }}
  run-commit-sha:
    description: 'Workflow Branch commit sha'
    value: ${{ steps.fetch_run_id.outputs.run_commit_sha }}
  run-id:
    description: 'Workflow run id'
    value: ${{ steps.fetch_run_id.outputs.run_id }}
  run-url:
    description: 'Workflow run url'
    value: ${{ steps.fetch_run_id.outputs.run_url }}
  run-conclusion:
    description: 'Workflow run conclusion'
    value: ${{ steps.fetch_run_id.outputs.run_conclusion }}

runs:
  using: "composite"
  steps:
    - name: Find workflow artifact candidate
      shell: bash
      id: fetch_run_id
      run: |
        loop_count=300
        if [[ -n "${{ inputs.override_release_fact_workflow }}" ]]; then
          if [[ -n "${{ inputs.commit }}" ]]; then
            echo "Search the lastest $loop_count workflow runs on commit: ${{ inputs.commit }}" on workflow: ${{ inputs.override_release_fact_workflow }}
            runs=$(gh run list -R "${{ inputs.repo }}" -c "${{ inputs.commit }}" -w '${{ inputs.override_release_fact_workflow }}' -L $loop_count --json status,databaseId,conclusion,url,headBranch,headSha)
          else
            echo "Search the lastest $loop_count workflow runs on branch: ${{ inputs.branch }}" on workflow: ${{ inputs.override_release_fact_workflow }}
            runs=$(gh run list -R "${{ inputs.repo }}" -b "${{ inputs.branch }}" -w '${{ inputs.override_release_fact_workflow }}' -L $loop_count --json status,databaseId,conclusion,url,headBranch,headSha)
          fi
        else
          if [[ -n "${{ inputs.commit }}" ]]; then
            echo "Search the lastest $loop_count workflow runs on commit: ${{ inputs.commit }}" workflow: ${{ inputs.workflow }}
            runs=$(gh run list -R "${{ inputs.repo }}" -c "${{ inputs.commit }}" -w '${{ inputs.workflow }}' -L $loop_count --json status,databaseId,conclusion,url,headBranch,headSha)
          else
            echo "Search the lastest $loop_count workflow runs on branch: ${{ inputs.branch }}" workflow: ${{ inputs.workflow }}
            runs=$(gh run list -R "${{ inputs.repo }}" -b "${{ inputs.branch }}" -w '${{ inputs.workflow }}' -L $loop_count --json status,databaseId,conclusion,url,headBranch,headSha)
          fi
        fi

        array_ptr=0
        success=false

        while [[ $array_ptr -ne $loop_count ]]; do
          run_status=$(echo $runs | jq -r --arg array_ptr $array_ptr '.[$array_ptr|tonumber].status')
          run_id=$(echo $runs | jq -r --arg array_ptr $array_ptr '.[$array_ptr|tonumber].databaseId')
          run_url=$(echo $runs | jq -r --arg array_ptr $array_ptr '.[$array_ptr|tonumber].url')
          run_branch=$(echo $runs | jq -r --arg array_ptr $array_ptr '.[$array_ptr|tonumber].headBranch')
          run_commit_sha=$(echo $runs | jq -r --arg array_ptr $array_ptr '.[$array_ptr|tonumber].headSha')

          if [[ "$run_url" == "null" ]]; then
            echo "No workflows run found on branch: ${{ inputs.branch }}"
            exit 1
          fi

          if [[ -n "${{ inputs.commit }}" ]]; then
            if [[ "$run_commit_sha" != "${{ inputs.commit }}" ]]; then
              echo "Skipping Workflow Run: $run_url due to commit mismatch"
              array_ptr=$((array_ptr+1))
              continue
            fi
          fi

          if [[ -n "${{ inputs.workflow_result_in_job }}" ]]; then
            run_conclusion=$(gh run view -R "${{ inputs.repo }}" $run_id --json workflowName,conclusion,jobs | jq -r '.jobs[] | select(.name == "${{ inputs.workflow_result_in_job }}") | .conclusion')
            if [[ -z "$run_conclusion" ]]; then
              run_conclusion=$(echo $runs | jq -r --arg array_ptr $array_ptr '.[$array_ptr|tonumber].conclusion')
            fi
          else
            run_conclusion=$(echo $runs | jq -r --arg array_ptr $array_ptr '.[$array_ptr|tonumber].conclusion')
          fi

          if [[ "$run_status" == "completed" ]]; then

            run_artifact_count=$(gh api repos/${{ inputs.repo }}/actions/runs/$run_id/artifacts | jq -r '.total_count')

            if [[ "$run_artifact_count" == "0" && "${{ inputs.ignore_artifacts }}" == "false" ]]; then
              echo "Skipping Workflow Run: $run_url due to artifact count being zero"
              array_ptr=$((array_ptr+1))
              continue

            elif [[ "$run_conclusion" == "success" ]]; then
              run_status_symbol=":white_check_mark:"
              success=true
              break

            # Select if we don't care about workflow failures
            elif [[ "${{ inputs.workflow_allow_failed }}" == "true" ]]; then
              run_status_symbol=":x:"
              success=true
              break

            else
              echo "Skipping Workflow Run: $run_url due to run failure run_conclusion: $run_conclusion"
              array_ptr=$((array_ptr+1))
              continue
            fi
          fi

          echo "Skipping Workflow Run: $run_url due to in progress"
          array_ptr=$((array_ptr+1))
        done

        if [[ "$success" == "false" ]]; then
          echo "Failed to find workflow run as a artifact candidate"
          exit 1
        fi

        echo "Using Workflow Run: $run_url on branch: $run_branch commit: $run_commit_sha run_id: $run_id run_conclusion: $run_conclusion"
        echo "run_id=$run_id" >> $GITHUB_OUTPUT
        echo "run_url=$run_url" >> $GITHUB_OUTPUT
        echo "run_status_symbol=$run_status_symbol" >> $GITHUB_OUTPUT
        echo "run_conclusion=$run_conclusion" >> $GITHUB_OUTPUT
        echo "run_commit_sha=$run_commit_sha" >> $GITHUB_OUTPUT
