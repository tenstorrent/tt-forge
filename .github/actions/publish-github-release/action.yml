name: "Publish GitHub Release"
description: "Publish GitHub Release"

inputs:
  release-artifacts-id:
    description: "Release artifacts"
    required: true
  repo:
    description: "Repo name"
    required: true
  release_type:
    description: "Release type"
    required: true
  new_version_tag:
    description: "New version tag for wheel"
    required: true
  draft:
    description: "Draft release"
    required: true
  prerelease:
    description: "Prerelease release"
    required: true
  release_token:
    description: "GitHub token"
    required: true
  target_commit:
    description: "Target commitish"
    required: true
  repo_short:
    description: "Repo short name"
    required: true
  unique_artifact_suffix:
    description: "Unique artifacts slug for draft testing"
    required: false
  make_latest:
    description: "Make release latest"
    required: false
    default: false

runs:
  using: "composite"
  steps:
    - uses: actions/download-artifact@v4
      with:
        artifact-ids: ${{ inputs.release-artifacts-id }}
        path: ${{ github.workspace }}/release
    - name: Set Name
      id: set-name
      shell: bash
      run: |
        unique_artifacts_suffix="${{ inputs.unique_artifact_suffix }}"
        release_type="${{ inputs.release_type }}"
        if [[ "$release_type" == "stable" ]]; then
          echo "name=Beta ${{ inputs.new_version_tag }}" >> $GITHUB_OUTPUT
        else
          echo "name=${release_type^} ${{ inputs.new_version_tag }}" >> $GITHUB_OUTPUT
        fi
        if [[ "${{ inputs.draft }}" != "true" ]]; then
          unique_artifacts_suffix=""
        fi
        echo "unique_artifacts_suffix=$unique_artifacts_suffix"
        echo "unique_artifacts_suffix=$unique_artifacts_suffix" >> $GITHUB_OUTPUT

    - name: Publish GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        body_path: "/tmp/release/docs/readme"
        token: ${{ inputs.release_token }}
        name: ${{ steps.set-name.outputs.name }}
        tag_name: ${{ inputs.new_version_tag }}
        target_commitish: ${{ inputs.draft == 'true' && 'main' || inputs.target_commit }}
        draft: ${{ inputs.draft }}
        repository: ${{ inputs.draft == 'true' && 'tenstorrent/tt-forge' || inputs.repo }}
        prerelease: ${{ inputs.prerelease }}
        make_latest: ${{ inputs.draft == 'true' && 'false' || inputs.make_latest }}
        fail_on_unmatched_files: true
        files: |
          ${{ github.workspace }}/release/build-release-${{ inputs.repo_short }}${{ steps.set-name.outputs.unique_artifacts_suffix }}/artifacts/**/*.whl
