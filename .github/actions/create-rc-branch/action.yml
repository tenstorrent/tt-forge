

name: "Create RC branch"
description: "Create RC branch"
inputs:
  repo:
    description: "Repo name"
    required: true
  draft:
    description: "Draft release"
    required: false
    default: false
  draft_slug_name:
    description: "Draft slug name"
    required: false
  GH_TOKEN:
    description: "GitHub token"
    required: true
  commit:
    description: "Commit sha if you want to override release branch selection by last passing workflow"
    required: false
  branch:
    description: "Source branch name"
    required: false
    default: ""
  workflow_allow_failed:
    description: "Ignore if workflow has failed"
    required: false
    type: boolean
    default: false
  workflow:
    description: "Workflow name"
    required: false
  ignore_artifacts:
    description: "Ignore artifacts"
    default: false
    required: false
  workflow_result_in_job:
    description: "Set that workflow result is job result"
    default: ""
    required: false
  major_version:
    description: "Major version"
    required: false
  minor_version:
    description: "Minor version"
    required: false
  override_release_fact_workflow:
    description: "Ignore release facts workflow"
    required: false
    type: string
    default: ''

outputs:
  branch_name:
    description: "Branch name"
    value: ${{ steps.create-rc-branch.outputs.branch_name }}
  tag_name:
    description: "Tag name"
    value: ${{ steps.create-rc-branch.outputs.tag_name }}
  latest_branch_commit:
    description: "Latest branch commit"
    value: ${{ steps.get-release-branch.outputs.latest_branch_commit }}
  current_release_tag_commit:
    description: "Current release tag commit"
    value: ${{ steps.get-release-branch.outputs.current_release_tag_commit }}

runs:
  using: "composite"
  steps:

    - name: Create new branch and tag
      id: create-rc-branch
      shell: bash
      run: |
        # Get the latest release branch and create a new semver bumped release branch in frontend repos

        branch_prefix="release"
        tag_prefix="${{ inputs.major_version }}.${{ inputs.minor_version }}.0"

        if [ "${{ inputs.draft }}" == "true" ]; then
            branch_prefix="draft-${{ inputs.draft_slug_name }}-release"
            tag_prefix="draft.${{ inputs.draft_slug_name }}.${tag_prefix}"
        fi

        tag_name="${tag_prefix}rc1"
        branch_name="${branch_prefix}-${{ inputs.major_version }}.${{ inputs.minor_version }}"

        echo "branch_name=$branch_name"
        echo "tag_name=$tag_name"

        echo "branch_name=$branch_name" >> $GITHUB_OUTPUT
        echo "tag_name=$tag_name" >> $GITHUB_OUTPUT

    - name: Find workflow candidate
      id: find_workflow
      uses: ./.github/actions/find-workflow
      env:
        GH_TOKEN: ${{ github.token }}
      with:
        repo: ${{ inputs.repo }}
        branch: ${{ inputs.branch || 'main' }}
        workflow: ${{ inputs.workflow || steps.set-release-facts.outputs.workflow }}
        workflow_allow_failed: ${{ inputs.workflow_allow_failed }}
        workflow_result_in_job: ${{ inputs.workflow_result_in_job }}
        commit: ${{ inputs.commit }}
        ignore_artifacts: ${{ inputs.ignore_artifacts }}
        override_release_fact_workflow: ${{ inputs.override_release_fact_workflow }}

    - name: Checkout target repo
      uses: actions/checkout@v4
      if: ${{ inputs.draft == 'false' }}
      with:
        repository: ${{ inputs.repo }}
        token: ${{ inputs.GH_TOKEN }}
        ref: ${{ steps.find_workflow.outputs.run-commit-sha }}
        fetch-depth: 0

    - name: Create/Get Release Branch
      shell: bash
      id: get-release-branch
      run: |
        # Create the release branch and add the starter tag

        # Set export commit sha and branch for git_facts.sh
        export branch="${{ steps.create-rc-branch.outputs.branch_name }}"
        tag_name="${{ steps.create-rc-branch.outputs.tag_name }}"

        check_branch=$(git ls-remote origin $branch)

        if [[ -z "$check_branch" ]]; then
            git checkout -b $branch ${{ steps.find_workflow.outputs.run-commit-sha }}
            git push origin $branch
        fi

        wget -q https://raw.githubusercontent.com/tenstorrent/tt-forge/refs/heads/${{ github.head_ref || github.ref_name }}/.github/scripts/git_facts.sh
        chmod +x git_facts.sh
        ls -al
        # Call twice for GHA workflow logs and to store in github output
        ./git_facts.sh
        ./git_facts.sh >> $GITHUB_OUTPUT


    # Recheckout forge repo to fix side effects for clean up job
    - uses: actions/checkout@v4
      if: ${{  inputs.draft == 'false' }}
