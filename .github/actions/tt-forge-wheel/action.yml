name: "Create tt-forge wheel"
description: "Creates a release wheel for tt-forge"
inputs:
  draft:
    description: "Draft release"
    required: true
    type: boolean
  release_type:
    description: "Release type"
    required: true
    type: string
  new_version_tag:
    description: "New version tag for wheel"
    required: true
    type: string
  repo_full:
    description: "Repo's full name"
    required: true
    type: string

runs:
  using: "composite"
  steps:
    - name: Set Release Facts
      id: set-release-facts
      uses: ./.github/actions/set-release-facts
      with:
        repo: tenstorrent/tt-forge
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Use yesterday version for draft
      id: use-yesterday-version
      shell: bash
      run: |
        NEW_VERSION_TAG=${{ inputs.new_version_tag }}
        if [[ "${{ inputs.draft }}" == "true" ]]; then
          # Take the last nightly release tag. Used for draft and workflow testing
          NEW_VERSION_TAG=$(gh release list -L 50 --repo ${{ inputs.repo_full }} --json tagName,isPrerelease,isDraft | jq -rc '[.[] | select(.isPrerelease==true and .isDraft==false) | select(.tagName | contains(".dev"))] | first | .tagName')
        fi
        echo "NEW_VERSION_TAG=$NEW_VERSION_TAG"
        echo "NEW_VERSION_TAG=$NEW_VERSION_TAG" >> $GITHUB_OUTPUT

    - name: Wait for pypi frontend wheels to be available on tt-pypi
      shell: bash
      env:
        PIP_WHEEL_NAMES: ${{ steps.set-release-facts.outputs.pip_wheel_deps_names }}
        NEW_VERSION_TAG: ${{ steps.use-yesterday-version.outputs.NEW_VERSION_TAG }}
      run: .github/scripts/wait-on-tt-pypi-wheels.sh

    - name: Build wheel
      shell: bash
      env:
        NEW_VERSION_TAG: ${{ steps.use-yesterday-version.outputs.NEW_VERSION_TAG }}
      run: |
        envsubst < .github/scripts/template-setup.py > setup.py
        pip install wheel
        python setup.py sdist bdist_wheel
        mkdir -p ${{ github.workspace }}/release/artifacts
        mv ${{ github.workspace }}/dist/*.whl ${{ github.workspace }}/release/artifacts/.
        cd ${{ github.workspace }}/release/artifacts
        # TODO: build alerting around this.
        if [ "${{ steps.set-release-facts.outputs.skip_wheel_install }}" == "false" ]; then
          pip install *.whl
        else
          pip install *.whl || echo "Failed to install wheel"
        fi
