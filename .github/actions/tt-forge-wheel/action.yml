name: "Create tt-forge wheel"
description: "Creates a release wheel for tt-forge"
inputs:
  draft:
    description: "Draft release"
    required: true
    type: boolean
  release_type:
    description: "Release type"
    required: true
    type: string
  new_version_tag:
    description: "New version tag for wheel"
    required: true
    type: string
  repo_full:
    description: "Repo's full name"
    required: true
    type: string

runs:
  using: "composite"
  steps:
    - name: Set Release Facts
      id: set-release-facts
      uses: ./.github/actions/set-release-facts
      with:
        repo: tenstorrent/tt-forge
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Use yesterday version for draft
      id: use-yesterday-version
      shell: bash
      run: |
        export NEW_VERSION_TAG=${{ inputs.new_version_tag }}
        if [[ "${{ inputs.draft }}" == "true" ]]; then
          # Take the last nightly release tag. Used for draft and workflow testing
          export NEW_VERSION_TAG=$(gh release list -L 50 --repo ${{ inputs.repo_full }} --json tagName,isPrerelease,isDraft | jq -rc '[.[] | select(.isPrerelease==true and .isDraft==false) | select(.tagName | contains(".dev"))] | first | .tagName')

          # Wait on tt-forge-fe nightly release to be available on pypi
          export PIP_WHEEL_NAMES="${{ steps.set-release-facts.outputs.pip_wheel_deps_names }}"
          .github/scripts/wait-on-tt-pypi-wheels.sh

          PJRT_PLUGIN_TT_TAG=${NEW_VERSION_TAG}
          TT_FORGE_FE_TAG=${NEW_VERSION_TAG}

        elif [[ "${{ inputs.release_type }}" == "nightly" ]]; then
          # Wait on tt-forge-fe nightly release to be available on pypi
          export PIP_WHEEL_NAMES="${{ steps.set-release-facts.outputs.pip_wheel_deps_names }}"
          .github/scripts/wait-on-tt-pypi-wheels.sh
          PJRT_PLUGIN_TT_TAG=${NEW_VERSION_TAG}
          TT_FORGE_FE_TAG=${NEW_VERSION_TAG}

        elif [[ "${{ inputs.release_type }}" == "rc" ]]; then
          # Get the latest rc tag for tt-torch and tt-xla and tt-forge-fe from github repo
          PJRT_PLUGIN_TT_TAG=$(gh release list -L 50 --repo tenstorrent/tt-xla --json tagName,isPrerelease,isDraft | jq -rc '[.[] | select(.isPrerelease==true and .isDraft==false) | select(.tagName | contains("rc"))] | first | .tagName')
          TT_FORGE_FE_TAG=$(gh release list -L 50 --repo tenstorrent/tt-forge-fe --json tagName,isPrerelease,isDraft | jq -rc '[.[] | select(.isPrerelease==true and .isDraft==false) | select(.tagName | contains("rc"))] | first | .tagName')

        elif [[ "${{ inputs.release_type }}" == "stable" ]]; then
          # Get the latest stable tag for tt-torch and tt-xla
          IFS='.' read -r major minor patch <<< "$NEW_VERSION_TAG"
          MAJOR_MINOR="${major}.${minor}"
          PJRT_PLUGIN_TT_TAG=$(gh release list -L 50 --repo tenstorrent/tt-xla --json tagName,isPrerelease,isDraft | jq -rc  --arg MAJOR_MINOR "$MAJOR_MINOR" '[.[] | select(.isPrerelease==false and .isDraft==false) | select(.tagName | contains($MAJOR_MINOR))] | first | .tagName')
          TT_FORGE_FE_TAG=$(gh release list -L 50 --repo tenstorrent/tt-forge-fe --json tagName,isPrerelease,isDraft | jq -rc  --arg MAJOR_MINOR "$MAJOR_MINOR" '[.[] | select(.isPrerelease==false and .isDraft==false) | select(.tagName | contains($MAJOR_MINOR))] | first | .tagName')
        fi

        echo "PJRT_PLUGIN_TT_TAG=$PJRT_PLUGIN_TT_TAG"
        echo "TT_FORGE_FE_TAG=$TT_FORGE_FE_TAG"
        echo "NEW_VERSION_TAG=$NEW_VERSION_TAG"
        echo "export PJRT_PLUGIN_TT_TAG=$PJRT_PLUGIN_TT_TAG" >> /tmp/wheel-env
        echo "export TT_FORGE_FE_TAG=$TT_FORGE_FE_TAG" >> /tmp/wheel-env
        echo "export NEW_VERSION_TAG=$NEW_VERSION_TAG" >> /tmp/wheel-env


    - name: Build wheel
      shell: bash
      run: |
        source /tmp/wheel-env
        rm /tmp/wheel-env
        envsubst < .github/scripts/template-setup.py > setup.py
        cat setup.py
        pip install wheel
        python setup.py bdist_wheel
        mkdir -p ${{ github.workspace }}/release/artifacts
        mv ${{ github.workspace }}/dist/*.whl ${{ github.workspace }}/release/artifacts/.
