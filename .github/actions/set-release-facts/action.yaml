
name: "Set Release Facts"
description: "Set Release Facts"
inputs:
  repo:
    description: "Repo name"
    required: true
  release_type:
    description: "Release type"
    required: false
  draft:
    description: "Draft release"
    required: false
  new_version_tag:
    description: "New version tag for wheel"
    required: false
outputs:
  workflow:
    description: "Workflow name"
    value: ${{ steps.set-manifest.outputs.workflow }}
  artifact_download_glob:
    description: "Artifact download glob"
    value: ${{ steps.set-manifest.outputs.artifact_download_glob }}
  artifact_cleanup_file_glob:
    description: "Artifact cleanup file glob"
    value: ${{ steps.set-manifest.outputs.artifact_cleanup_file_glob }}
  artifact_cleanup_folder_glob:
    description: "Artifact cleanup folder glob"
    value: ${{ steps.set-manifest.outputs.artifact_cleanup_folder_glob }}
  workflow_result_in_job:
    description: "Workflow result in job"
    value: ${{ steps.set-manifest.outputs.workflow_result_in_job }}
  repo_short:
    description: "Repo short name without owner"
    value: ${{ steps.set-manifest.outputs.repo_short }}
  new_version_tag:
    description: "New version tag for wheel"
    value: ${{ steps.set-manifest.outputs.new_version_tag }}
  pip_wheel_names:
    description: "Names of pip wheels"
    value: ${{ steps.set-manifest.outputs.pip_wheel_names }}
  pip_wheel_deps_names:
    description: "Names of pip wheel dependencies"
    value: ${{ steps.set-manifest.outputs.pip_wheel_deps_names }}
  skip_wheel_install:
    description: "Skip wheel install"
    value: ${{ steps.set-manifest.outputs.skip_wheel_install }}

runs:
  using: "composite"
  steps:
    - name: Set Releaser manifest
      id: set-manifest
      shell: bash
      run: |
        # Set release facts based on repo

        # Globals
        skip_wheel_install="false"

        if [[ "${{ inputs.repo }}" =~ "tt-forge-fe" ]]; then
            workflow="On nightly"
            if [[ "${{ inputs.release_type }}" == "nightly" ]]; then
                workflow="On push"
            fi
            artifact_download_glob='*{wheel,test-reports}*'
            artifact_cleanup_file_glob='*{.json,benchmark_}*'
            workflow_result_in_job="fail-notify"
            pip_wheel_names="tt_forge_fe tt_tvm"
        elif [[ "${{ inputs.repo }}" =~ "tt-torch" ]]; then
            workflow="Nightly Tests"
            if [[ "${{ inputs.release_type }}" == "nightly" ]]; then
                workflow="On push"
            fi
            artifact_download_glob='*{install-artifacts-release,test-reports-models-}*'
            artifact_cleanup_file_glob='*torchvision*'
            artifact_cleanup_folder_glob='*install-artifacts-debug*'
            pip_wheel_names="tt-torch"
        elif [[ "${{ inputs.repo }}" =~ "tt-mlir" ]]; then
            # NOTE: no nightly job current for tt-mlir keeping this here for future use
            #workflow="On push"
            if [[ "${{ inputs.release_type }}" == "nightly" ]]; then
                workflow="On push"
            fi
            artifact_download_glob='*ttmlir-wheel*'
            pip_wheel_names="ttmlir"
        elif [[ "${{ inputs.repo }}" =~ "tt-xla" ]]; then
            workflow="On nightly"
            if [[ "${{ inputs.release_type }}" == "nightly" ]]; then
                workflow="On push"
            fi
            artifact_download_glob='*{xla-whl-release,test-reports}*'
            pip_wheel_names="pjrt-plugin-tt"
        elif [[ "${{ inputs.repo }}" =~ "tt-forge" ]]; then
            pip_wheel_deps_names="tt-torch tt_forge_fe tt_tvm pjrt-plugin-tt"
            pip_wheel_names="tt-forge"
            skip_wheel_install="true"
        else
            echo "Unknown repo: ${{ inputs.repo }}"
            exit 1
        fi

        repo_short="${{ inputs.repo }}"
        repo_short="${repo_short#tenstorrent/}"
        new_version_tag="${{ inputs.new_version_tag }}"
        if [[ "${{ inputs.draft }}" == "true" ]]; then
            new_version_tag="draft-${repo_short}-${new_version_tag}"
        fi

        echo "Using workflow: $workflow"
        echo "Using artifact_download_glob: $artifact_download_glob"
        echo "Using artifact_cleanup_file_glob: $artifact_cleanup_file_glob"
        echo "Using workflow_result_in_job: $workflow_result_in_job"
        echo "Using artifact_cleanup_folder_glob: $artifact_cleanup_folder_glob"
        echo "Using workflow_allow_failed: $workflow_allow_failed"
        echo "Using latest_branch_commit: $latest_branch_commit"
        echo "Using new_version_tag: $new_version_tag"
        echo "Using release_type: ${{ inputs.release_type }}"
        echo "Using latest_branch_commit_date: $latest_branch_commit_date"
        echo "Using second_latest_branch_commit_date: $second_latest_branch_commit_date"
        echo "Using repo_short: $repo_short"
        echo "Using pip_wheel_names: $pip_wheel_names"
        echo "Using pip_wheel_deps_names: $pip_wheel_deps_names"
        echo "Using skip_wheel_install: $skip_wheel_install"

        # Set outputs
        echo "workflow=$workflow" >> $GITHUB_OUTPUT
        echo "artifact_download_glob=$artifact_download_glob" >> $GITHUB_OUTPUT
        echo "artifact_cleanup_file_glob=$artifact_cleanup_file_glob" >> $GITHUB_OUTPUT
        echo "artifact_cleanup_folder_glob=$artifact_cleanup_folder_glob" >> $GITHUB_OUTPUT
        echo "workflow_result_in_job=$workflow_result_in_job" >> $GITHUB_OUTPUT
        echo "repo_short=$repo_short" >> $GITHUB_OUTPUT
        echo "new_version_tag=$new_version_tag" >> $GITHUB_OUTPUT
        echo "pip_wheel_names=$pip_wheel_names" >> $GITHUB_OUTPUT
        echo "pip_wheel_deps_names=$pip_wheel_deps_names" >> $GITHUB_OUTPUT
        echo "skip_wheel_install=$skip_wheel_install" >> $GITHUB_OUTPUT
