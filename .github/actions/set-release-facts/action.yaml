
name: "Set Release Facts"
description: "Set Release Facts"
inputs:
  repo:
    description: "Repo name"
    required: false
  release_type:
    description: "Release type"
    required: false
  draft:
    description: "Draft release"
    required: false
  new_version_tag:
    description: "New version tag for wheel"
    required: false
    default: ''
  branch:
    description: "Branch name"
    required: false
    default: ''
  latest_branch_commit:
    description: "Latest branch commit"
    required: false
    default: ''
outputs:
  workflow:
    description: "Workflow name"
    value: ${{ steps.set-manifest.outputs.workflow }}
  artifact_download_glob:
    description: "Artifact download glob"
    value: ${{ steps.set-manifest.outputs.artifact_download_glob }}
  artifact_cleanup_file_glob:
    description: "Artifact cleanup file glob"
    value: ${{ steps.set-manifest.outputs.artifact_cleanup_file_glob }}
  artifact_cleanup_folder_glob:
    description: "Artifact cleanup folder glob"
    value: ${{ steps.set-manifest.outputs.artifact_cleanup_folder_glob }}
  workflow_result_in_job:
    description: "Workflow result in job"
    value: ${{ steps.set-manifest.outputs.workflow_result_in_job }}
  repo_short:
    description: "Repo short name without owner"
    value: ${{ steps.set-manifest.outputs.repo_short }}
  new_version_tag:
    description: "New version tag for wheel"
    value: ${{ steps.set-manifest.outputs.new_version_tag }}
  gh_new_version_tag:
    description: "New version tag for GitHub release"
    value: ${{ steps.set-manifest.outputs.gh_new_version_tag }}
  pip_wheel_names:
    description: "Names of pip wheels"
    value: ${{ steps.set-manifest.outputs.pip_wheel_names }}
  pip_wheel_deps_names:
    description: "Names of pip wheel dependencies"
    value: ${{ steps.set-manifest.outputs.pip_wheel_deps_names }}
  skip_wheel_install:
    description: "Skip wheel install"
    value: ${{ steps.set-manifest.outputs.skip_wheel_install }}
  all_repos:
    description: "All repos that are allowed to release"
    value: ${{ steps.set-manifest.outputs.all_repos }}
  build_release_tag:
    description: "Build release tag"
    value: ${{ steps.set-manifest.outputs.build_release_tag }}
  build_release_find_workflow_branch:
    description: "Build find workflow branch"
    value: ${{ steps.set-manifest.outputs.build_release_find_workflow_branch }}
  workflow_allow_failed:
    description: "Return run even if workflow has failed"
    value: ${{ steps.set-manifest.outputs.workflow_allow_failed }}
  build_release_latest_branch_commit:
    description: "Build release latest branch commit"
    value: ${{ steps.set-manifest.outputs.build_release_latest_branch_commit }}
  major_version:
    description: "Major version"
    value: ${{ steps.set-manifest.outputs.major_version }}
  minor_version:
    description: "Minor version"
    value: ${{ steps.set-manifest.outputs.minor_version }}
  prerelease:
    description: "Prerelease release"
    value: ${{ steps.set-manifest.outputs.prerelease }}
  repo_full:
    description: "Repo name with full path"
    value: ${{ steps.set-manifest.outputs.repo_full }}
  draft:
    description: "Draft release"
    value: ${{ steps.set-manifest.outputs.draft }}
  event_name:
    description: "Event name"
    value: ${{ steps.set-manifest.outputs.event_name }}
  make_latest:
    description: "Make release latest"
    value: ${{ steps.set-manifest.outputs.make_latest }}
  ignore_artifacts:
    description: "Ignore artifacts"
    value: ${{ steps.set-manifest.outputs.ignore_artifacts }}
  skip_model_compatible_table:
    description: "Skip model compatible table"
    value: ${{ steps.set-manifest.outputs.skip_model_compatible_table }}
  ignore_docker_instructions:
    description: "Ignore docker instructions"
    value: ${{ steps.set-manifest.outputs.ignore_docker_instructions }}
  skip_docker_build:
    description: "Skip docker build"
    value: ${{ steps.set-manifest.outputs.skip_docker_build }}
  git_log_fail_on_error:
    description: "Fail on error"
    value: ${{ steps.set-manifest.outputs.git_log_fail_on_error }}
  test_demo_filter:
    description: "Test demo filter"
    value: ${{ steps.set-manifest.outputs.test_demo_filter }}
  test_demo_wait:
    description: "Test demo wait"
    value: ${{ steps.set-manifest.outputs.test_demo_wait }}
  docker_build_file:
    description: "Docker build file"
    value: ${{ steps.set-manifest.outputs.docker_build_file }}
  python_version:
    description: "Python version"
    value: ${{ steps.set-manifest.outputs.python_version }}


runs:
  using: "composite"
  steps:
    - name: Set Releaser manifest
      id: set-manifest
      shell: bash
      run: |
        # Set release facts based on repo
        set -e
        source .version

        # All Repo Defaults

        skip_wheel_install="false"
        repo="${{ inputs.repo }}"
        repo_short="${repo#tenstorrent/}"
        repo_full="tenstorrent/${repo_short}"
        # List of all repos that are allowed to release. Make sure to update the conditional below
        all_repos='tenstorrent/tt-forge-fe tenstorrent/tt-torch tenstorrent/tt-mlir tenstorrent/tt-xla tenstorrent/tt-forge'
        workflow_allow_failed="false"
        build_release_find_workflow_branch="${{ inputs.branch }}"
        build_release_latest_branch_commit="${{ inputs.latest_branch_commit }}"
        build_release_tag="${{ inputs.new_version_tag }}"
        prerelease="true"
        draft="${{ inputs.draft }}"
        event_name="${{ github.event_name }}"
        make_latest="false"
        major_version=$MAJOR
        minor_version=$MINOR
        ignore_artifacts="false"
        skip_model_compatible_table="false"
        skip_docker_build="false"
        git_log_fail_on_error="true"
        test_demo_filter=""
        test_demo_wait="false"
        docker_build_file=".github/Dockerfile.single-wheel-slim"
        python_version="3.10"

        # Tag & Release Defaults

        new_version_tag="${{ inputs.new_version_tag }}"

        # RC is not mentioned here since the defaults are enough
        if [[ "${{ inputs.release_type }}" == "stable" ]]; then
          prerelease="false"
          make_latest="true"
        elif [[ "${{ inputs.release_type }}" == "nightly" ]]; then
          new_version_tag="${VERSION}.dev$(date +"%Y%m%d")"
          workflow_allow_failed="true"
          build_release_find_workflow_branch="main"
        fi

        gh_new_version_tag="${new_version_tag}"
        build_release_tag="${new_version_tag}"


        # Repo Specific Defaults

        if [[ "${{ inputs.repo }}" =~ "tt-forge-fe" ]]; then
            workflow="On nightly"
            if [[ "${{ inputs.release_type }}" == "nightly" ]]; then
                workflow="On push"
            fi
            artifact_download_glob='*{wheel,test-reports}*'
            artifact_cleanup_file_glob='*{.json,benchmark_}*'
            workflow_result_in_job="fail-notify"
            pip_wheel_names="tt_forge_fe tt_tvm"
        elif [[ "${{ inputs.repo }}" =~ "tt-torch" ]]; then
            workflow="Nightly Tests"
            if [[ "${{ inputs.release_type }}" == "nightly" ]]; then
                workflow="On push"
            fi
            artifact_download_glob='*{install-artifacts-release,test-reports-models-}*'
            artifact_cleanup_file_glob='*torchvision*'
            artifact_cleanup_folder_glob='*install-artifacts-debug*'
            pip_wheel_names="tt-torch"
            docker_build_file=".github/Dockerfile.single-wheel-slim-3.11"
            python_version="3.11"
        elif [[ "${{ inputs.repo }}" =~ "tt-mlir" ]]; then
            # NOTE: no nightly job current for tt-mlir keeping this here for future use
            workflow="On push"
            if [[ "${{ inputs.release_type }}" == "nightly" ]]; then
                workflow="On push"
            fi
            artifact_download_glob='*ttmlir-wheel*'
            pip_wheel_names="ttmlir"
            skip_model_compatible_table="true"
            skip_docker_build="true"
            python_version="3.11"
        elif [[ "${{ inputs.repo }}" =~ "tt-xla" ]]; then
            workflow="On nightly"
            if [[ "${{ inputs.release_type }}" == "nightly" ]]; then
                workflow="On push"
            fi
            artifact_download_glob='*{xla-whl-release,test-reports}*'
            pip_wheel_names="pjrt-plugin-tt"
            docker_build_file=".github/Dockerfile.single-wheel-slim-3.11"
            python_version="3.11"
        elif [[ "${{ inputs.repo }}" =~ "tt-forge" ]]; then
            workflow="Daily Releaser"
            ignore_artifacts="true"
            pip_wheel_deps_names="tt-torch tt_forge_fe tt_tvm pjrt-plugin-tt"
            pip_wheel_names="tt-forge"
            skip_wheel_install="true"
            skip_model_compatible_table="true"
            skip_docker_build="true"
        fi


        # Testing Overrides

        # Different tags exist for integration testing for draft releases/test workflow. This is to guard against overwriting releases
        # We also can't use the draft style tag below since it won't work when we do a wheel re-version
        # REF: https://packaging.python.org/en/latest/discussions/versioning/#valid-version-numbers
        if [[ "${{ inputs.draft }}" == "true" ]]; then
            prerelease="true"
            # Wait for the demo test to complete only for draft releases and run only one test
            test_demo_filter="opt_125m"
            test_demo_wait="true"

            # null out the commit to so integration testing can pick up the arfiacts from the repo.
            # This is because this commit belongs to the tt-forge repo not where the artifacts are stored.
            # Since this is null, it will pick up the artifacts based on branch
            build_release_latest_branch_commit=""

            # Used in testing to pick up the arfiacts from the main branch.
            build_release_find_workflow_branch="main"

            # build_release_tag is a sanitized version tag for build_release action.
            # Tag sanitization only needs to happen for rc and stable release. See get-branches for more detail.

            if [[ "${{ inputs.release_type }}" == "stable" ]]; then
                new_version_tag="draft.${repo_short}.${new_version_tag}"
                set +e
                build_release_tag="$(echo "${new_version_tag}" | grep -oP '\d+\.\d+\.\d+')"
                set -e
                # Set to false for draft releases since we don't want to fail on error the RC & Stable Lifecycle test
                git_log_fail_on_error="false"
            elif [[ "${{ inputs.release_type }}" == "rc" ]]; then
                set +e
                build_release_tag="$(echo "${new_version_tag}" | grep -oP '\d+\.\d+\.\d+rc\d+')"
                set -e
                # Set to false for draft releases since we don't want to fail on error the RC & Stable Lifecycle test
                git_log_fail_on_error="false"
            else
                build_release_tag="${new_version_tag}"
            fi

            gh_new_version_tag="draft.${repo_short}.${build_release_tag}"
        fi

        echo "## Set Release Facts Outputs ##"
        echo "workflow=$workflow"
        echo "ignore_artifacts=$ignore_artifacts"
        echo "event_name=$event_name"
        echo "artifact_download_glob=$artifact_download_glob"
        echo "artifact_cleanup_file_glob=$artifact_cleanup_file_glob"
        echo "workflow_result_in_job=$workflow_result_in_job"
        echo "artifact_cleanup_folder_glob=$artifact_cleanup_folder_glob"
        echo "workflow_allow_failed=$workflow_allow_failed"
        echo "new_version_tag=$new_version_tag"
        echo "gh_new_version_tag=$gh_new_version_tag"
        echo "release_type=${{ inputs.release_type }}"
        echo "repo_short=$repo_short"
        echo "repo_full=$repo_full"
        echo "repo=$repo"
        echo "pip_wheel_names=$pip_wheel_names"
        echo "pip_wheel_deps_names=$pip_wheel_deps_names"
        echo "skip_wheel_install=$skip_wheel_install"
        echo "all_repos=$all_repos"
        echo "build_release_tag=$build_release_tag"
        echo "build_release_find_workflow_branch=$build_release_find_workflow_branch"
        echo "build_release_latest_branch_commit=$build_release_latest_branch_commit"
        echo "major_version=$major_version"
        echo "minor_version=$minor_version"
        echo "prerelease=$prerelease"
        echo "draft=$draft"
        echo "make_latest=$make_latest"
        echo "skip_model_compatible_table=$skip_model_compatible_table"
        echo "ignore_docker_instructions=$ignore_docker_instructions"
        echo "skip_docker_build=$skip_docker_build"
        echo "git_log_fail_on_error=$git_log_fail_on_error"
        echo "test_demo_filter=$test_demo_filter"
        echo "test_demo_wait=$test_demo_wait"
        echo "docker_build_file=$docker_build_file"
        echo "python_version=$python_version"

        # Set outputs
        echo "workflow=$workflow" >> $GITHUB_OUTPUT
        echo "ignore_artifacts=$ignore_artifacts" >> $GITHUB_OUTPUT
        echo "event_name=$event_name" >> $GITHUB_OUTPUT
        echo "artifact_download_glob=$artifact_download_glob" >> $GITHUB_OUTPUT
        echo "artifact_cleanup_file_glob=$artifact_cleanup_file_glob" >> $GITHUB_OUTPUT
        echo "artifact_cleanup_folder_glob=$artifact_cleanup_folder_glob" >> $GITHUB_OUTPUT
        echo "workflow_result_in_job=$workflow_result_in_job" >> $GITHUB_OUTPUT
        echo "repo_short=$repo_short" >> $GITHUB_OUTPUT
        echo "repo_full=$repo_full" >> $GITHUB_OUTPUT
        echo "new_version_tag=$new_version_tag" >> $GITHUB_OUTPUT
        echo "gh_new_version_tag=$gh_new_version_tag" >> $GITHUB_OUTPUT
        echo "pip_wheel_names=$pip_wheel_names" >> $GITHUB_OUTPUT
        echo "pip_wheel_deps_names=$pip_wheel_deps_names" >> $GITHUB_OUTPUT
        echo "skip_wheel_install=$skip_wheel_install" >> $GITHUB_OUTPUT
        echo "all_repos=$all_repos" >> $GITHUB_OUTPUT
        echo "build_release_tag=$build_release_tag" >> $GITHUB_OUTPUT
        echo "build_release_find_workflow_branch=$build_release_find_workflow_branch" >> $GITHUB_OUTPUT
        echo "workflow_allow_failed=$workflow_allow_failed" >> $GITHUB_OUTPUT
        echo "major_version=$major_version" >> $GITHUB_OUTPUT
        echo "minor_version=$minor_version" >> $GITHUB_OUTPUT
        echo "prerelease=$prerelease" >> $GITHUB_OUTPUT
        echo "draft=$draft" >> $GITHUB_OUTPUT
        echo "build_release_find_workflow_branch=$build_release_find_workflow_branch" >> $GITHUB_OUTPUT
        echo "build_release_latest_branch_commit=$build_release_latest_branch_commit" >> $GITHUB_OUTPUT
        echo "make_latest=$make_latest" >> $GITHUB_OUTPUT
        echo "skip_model_compatible_table=$skip_model_compatible_table" >> $GITHUB_OUTPUT
        echo "ignore_docker_instructions=$ignore_docker_instructions" >> $GITHUB_OUTPUT
        echo "skip_docker_build=$skip_docker_build" >> $GITHUB_OUTPUT
        echo "git_log_fail_on_error=$git_log_fail_on_error" >> $GITHUB_OUTPUT
        echo "test_demo_filter=$test_demo_filter" >> $GITHUB_OUTPUT
        echo "test_demo_wait=$test_demo_wait" >> $GITHUB_OUTPUT
        echo "docker_build_file=$docker_build_file" >> $GITHUB_OUTPUT
        echo "python_version=$python_version" >> $GITHUB_OUTPUT
