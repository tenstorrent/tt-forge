name: Nightly Release & Tests

on:
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild of Docker images even if they exist'
        type: boolean
        default: false
  schedule:
    - cron: '0 5 * * *'


permissions:
  packages: write
  checks: write
  attestations: write

jobs:

  build-tt-forge-slim:
    name: Build tt-forge-slim Docker Image
    runs-on: tt-ubuntu-2204-large-stable
    outputs:
      docker-image: ${{ steps.build.outputs.docker-image }}
      docker-image-harbor: ${{ steps.build.outputs.docker-image-harbor }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Set daily tag
        shell: bash
        run: |
          DAILY_TAG=dev$(date +'%Y%m%d')
          echo "daily_tag=${DAILY_TAG}" >> $GITHUB_ENV

      - name: Build and push tt-forge-slim
        shell: bash
        id: build
        env:
          VERSION_TAG: ${{ inputs.version_tag }}
        run: |
          IMAGE_NAME=ghcr.io/tenstorrent/tt-forge/tt-forge-slim
          DOCKER_TAG=${{ env.daily_tag }}
          # Check if image already exists and not forced to rebuild
          if docker manifest inspect $IMAGE_NAME:$DOCKER_TAG &>/dev/null && [[ "$GITHUB_REF_NAME" != "main" ]] && [[ "${{ github.event.inputs.force_rebuild }}" != "true" ]]; then
            echo "Image $IMAGE_NAME:$DOCKER_TAG already exists, skipping build"
          else
            echo "Building image $IMAGE_NAME:$DOCKER_TAG"
            docker build -f .github/Dockerfile.tt-forge-slim \
              -t $IMAGE_NAME:$DOCKER_TAG .
            docker push $IMAGE_NAME:$DOCKER_TAG
            echo "Docker image size:"
            docker images --format "{{.Size}}" $IMAGE_NAME:$DOCKER_TAG
            echo "Docker image layer sizes:"
            docker history --no-trunc --format "Size: {{.Size}}\tCreated: {{.CreatedSince}}\tCommand: {{.CreatedBy}}" $IMAGE_NAME:$DOCKER_TAG
          fi

          # Add latest tag if on main
          ON_MAIN=$(git branch --show-current | grep -q main && echo "true" || echo "false")
          if [ "$ON_MAIN" == "true" ]; then
            echo "Pushing latest tag for $IMAGE_NAME"
            TAGS="--tag $IMAGE_NAME:latest --tag $IMAGE_NAME:$DOCKER_TAG"

            if [ -n "$VERSION_TAG" ]; then
              echo "Pushing version tag for $IMAGE_NAME"
              TAGS="$TAGS --tag $IMAGE_NAME:$VERSION_TAG"
            fi

            docker buildx imagetools create $IMAGE_NAME:$DOCKER_TAG $TAGS
          fi

          echo "docker-image=$IMAGE_NAME:$DOCKER_TAG" >> $GITHUB_OUTPUT
          echo "docker-image-harbor=harbor.ci.tenstorrent.net/$IMAGE_NAME:$DOCKER_TAG" >> "$GITHUB_OUTPUT"

  basic-test-tt-forge-slim:
    needs:
      - build-tt-forge-slim
    uses: ./.github/workflows/basic-tests.yml
    with:
      docker-image: ${{ needs.build-tt-forge-slim.outputs.docker-image-harbor }}

  demo-test-tt-forge-slim:
    needs:
      - build-tt-forge-slim
      - basic-test-tt-forge-slim
    uses: ./.github/workflows/demo-tests.yml
    secrets: inherit
    with:
      docker-image: ${{ needs.build-tt-forge-slim.outputs.docker-image-harbor }}

  perf-test-tt-forge-slim:
    needs:
      - build-tt-forge-slim
      - basic-test-tt-forge-slim
    uses: ./.github/workflows/perf-benchmark.yml
    secrets: inherit
    with:
      docker-image: ${{ needs.build-tt-forge-slim.outputs.docker-image }}
