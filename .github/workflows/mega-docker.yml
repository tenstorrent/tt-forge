name: Build TT-Forge Docker Images

on:
  workflow_dispatch:
  push:

permissions:
  packages: write
  checks: write

jobs:

  build-tt-forge-slim:
    name: Build tt-forge-slim Docker Image
    # runs-on: tt-beta-ubuntu-2204-large
    runs-on: ubuntu-latest
    outputs:
      docker-image: ${{ steps.build.outputs.docker-image }}
      docker-image-harbor: ${{ steps.build.outputs.docker-image-harbor }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Set daily tag and wheel URLs
        shell: bash
        run: |
          DAILY_TAG=dev$(date +'%Y%m%d')
          WHL_VERSION=0.1.0.${DAILY_TAG}
          echo "daily_tag=${DAILY_TAG}" >> $GITHUB_ENV
          echo "wheels_version=${WHL_VERSION}" >> $GITHUB_ENV

      - name: Build and push tt-forge-slim
        shell: bash
        id: build
        run: |
          IMAGE_NAME=ghcr.io/tenstorrent/tt-forge/tt-forge-slim
          DOCKER_TAG=${{ env.daily_tag }}

          # Check if the image already exists
          if docker manifest inspect $IMAGE_NAME:$DOCKER_TAG > /dev/null 2>&1; then
            echo "Image $IMAGE_NAME:$DOCKER_TAG already exists, skipping build"
          else
            echo "Building image $IMAGE_NAME:$DOCKER_TAG"
            docker build -f .github/Dockerfile.tt-forge-slim \
              --build-arg WHL_VERSION="${{ env.wheels_version }}" \
              -t $IMAGE_NAME:$DOCKER_TAG .
            docker push $IMAGE_NAME:$DOCKER_TAG
            echo "\nDocker image size:"
            docker images --format "{{.Size}}" $IMAGE_NAME:$DOCKER_TAG
            echo "\nDocker image layer sizes:"
            docker history --no-trunc --format "Size: {{.Size}}\tCreated: {{.CreatedSince}}\tCommand: {{.CreatedBy}}" $IMAGE_NAME:$DOCKER_TAG
          fi

          echo "docker-image=$IMAGE_NAME:$DOCKER_TAG" >> $GITHUB_OUTPUT
          echo "docker-image-harbor=harbor.ci.tenstorrent.net/$IMAGE_NAME:$DOCKER_TAG" >> "$GITHUB_OUTPUT"


  test-tt-forge-slim:
    needs: build-tt-forge-slim
    strategy:
      fail-fast: false
      matrix:
        runs-on:
          - tt-beta-ubuntu-2204-n150-large-stable
        demos:
          - { "frontend": "tt-forge-fe", "demo": "cnn/mobile_netv2_demo.py" }
          - { "frontend": "tt-forge-fe", "demo": "cnn/resnet_50_demo.py" }
          - { "frontend": "tt-forge-fe", "demo": "cnn/resnet_onnx_demo.py" }
          - { "frontend": "tt-forge-fe", "demo": "nlp/bert_demo.py" }
          - { "frontend": "tt-torch", "demo": "cnn/mobile_netv2_demo.py" }
          - { "frontend": "tt-torch", "demo": "resnet50_benchmark.py" }

    runs-on: ${{ matrix.runs-on }}
    container:
      image: ${{ needs.build-tt-forge-slim.outputs.docker-image-harbor }}
      # image: ${{ needs.build-tt-forge-slim.outputs.docker-image }}
      options: --device /dev/tenstorrent --user forge
      volumes:
        - /dev/hugepages:/dev/hugepages
        - /dev/hugepages-1G:/dev/hugepages-1G
        - /etc/udev/rules.d:/etc/udev/rules.d
        - /lib/modules:/lib/modules
        - /opt/tt_metal_infra/provisioning/provisioning_env:/opt/tt_metal_infra/provisioning/provisioning_env

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run ${{ matrix.demos.demo }} tests
        if: ${{ matrix.demos.frontend == 'tt-forge-fe' }}
        shell: bash
        run: |
          source /home/forge/venv-${{ matrix.demos.frontend }}/bin/activate
          python demos/${{ matrix.demos.frontend }}/${{ matrix.demos.demo }}

      - name: Run ${{ matrix.demos.demo }} tests
        if: ${{ matrix.demos.frontend == 'tt-torch' }}
        shell: bash
        run: |
          source /home/forge/venv-${{ matrix.demos.frontend }}/bin/activate

          # tt-torch workarounds
          # Install tt-torch dependencies
          curl -s https://raw.githubusercontent.com/tenstorrent/tt-torch/main/requirements.txt -o requirements.txt
          pip install -r requirements.txt
          # Add venv-tt-torch and venv-tt-torch/lib to PYTHONPATH
          export PYTHONPATH=$PYTHONPATH:venv-tt-torch:venv-tt-torch/lib

          python demos/${{ matrix.demos.frontend }}/${{ matrix.demos.demo }}
