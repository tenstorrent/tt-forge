name: Build TT-Forge Docker Images

on:
  # push:
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild of Docker images even if they exist'
        type: boolean
        default: false
      # tt_forge_fe_version:
      #   description: 'Specific tt-forge-fe commit SHA or branch name'
      #   required: false
      #   type: string
      # tt_torch_version:
      #   description: 'Specific tt-torch commit SHA or branch name'
      #   required: false
      #   type: string
      # tt_xla_version:
      #   description: 'Specific tt-xla commit SHA or branch name'
      #   required: false
      #   type: string
      use_latest_tt_torch_artifacts:
        description: 'Use latest tt-torch from artifacts'
        type: boolean
        default: false


permissions:
  packages: write
  checks: write

jobs:

  build-tt-forge-slim:
    name: Build tt-forge-slim Docker Image
    # runs-on: tt-beta-ubuntu-2204-large
    # TODO We cant use tt-beta-ubuntu-2204-large until we whitelist pypi.eng.aws.tenstorrent.com on proxy
    runs-on: ubuntu-latest
    outputs:
      docker-image: ${{ steps.build.outputs.docker-image }}
      docker-image-harbor: ${{ steps.build.outputs.docker-image-harbor }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup artifact directories
        if: ${{ github.event.inputs.tt_forge_fe_version != '' || github.event.inputs.tt_torch_version != '' || github.event.inputs.tt_xla_version != '' }}
        run: |
          mkdir -p artifacts/{tt-forge-fe,tt-torch,tt-xla}
          mkdir -p wheels/{tt-forge-fe,tt-torch,tt-xla}

      - name: Download tt-torch artifacts
        if: ${{ github.event.inputs.use_latest_tt_torch_artifacts != false }}
        id: download_tt_torch_artifacts
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow_conclusion: success
          workflow: on-push.yml
          branch: main
          name: install-artifacts
          repo: tenstorrent/tt-torch
          check_artifacts: true
          path: artifacts/tt-torch

      - name: Unpack tt-torch artifacts
        if: ${{ github.event.inputs.use_latest_tt_torch_artifacts != false }}
        shell: bash
        run: |
          ls -l artifacts/tt-torch
          tar -xvf artifacts/tt-torch/install-artifacts-tracy/whl/*.whl -C wheels/tt-torch

      - name: Build and push tt-forge-slim
        shell: bash
        id: build
        run: |
          IMAGE_NAME=ghcr.io/tenstorrent/tt-forge/tt-forge-slim
          DOCKER_TAG=${{ env.daily_tag }}
          # Check if image already exists and not forced to rebuild
          if docker manifest inspect $IMAGE_NAME:$DOCKER_TAG &>/dev/null && [[ "$GITHUB_REF_NAME" != "main" ]] && [[ "${{ github.event.inputs.force_rebuild }}" != "true" ]]; then
            echo "Image $IMAGE_NAME:$DOCKER_TAG already exists, skipping build"
          else
            echo "Building image $IMAGE_NAME:$DOCKER_TAG"
            # Build with custom artifacts if provided
            BUILD_ARGS=""
            if [ -n "${{ env.tt_torch_artifact_path }}" ]; then
              BUILD_ARGS="$BUILD_ARGS --build-arg TT_TORCH_ARTIFACT_PATH=${{ env.tt_torch_artifact_path }}"
            fi

            echo "Build arguments: $BUILD_ARGS"
            docker build -f .github/Dockerfile.tt-forge-slim $BUILD_ARGS \
              -t $IMAGE_NAME:$DOCKER_TAG .
            docker push $IMAGE_NAME:$DOCKER_TAG
            echo "Docker image size:"
            docker images --format "{{.Size}}" $IMAGE_NAME:$DOCKER_TAG
            echo "Docker image layer sizes:"
            docker history --no-trunc --format "Size: {{.Size}}\tCreated: {{.CreatedSince}}\tCommand: {{.CreatedBy}}" $IMAGE_NAME:$DOCKER_TAG
          fi

          echo "docker-image=$IMAGE_NAME:$DOCKER_TAG" >> $GITHUB_OUTPUT
          echo "docker-image-harbor=harbor.ci.tenstorrent.net/$IMAGE_NAME:$DOCKER_TAG" >> "$GITHUB_OUTPUT"


  basic-test-tt-forge-slim:
    name: Basic test ${{ matrix.frontend }} on ${{ matrix.runs-on }}
    needs: build-tt-forge-slim
    strategy:
      fail-fast: false
      matrix:
        runs-on:
          - tt-beta-ubuntu-2204-n150-large-stable
          - tt-beta-ubuntu-2204-p150b-large-stable
        frontend:
          - tt-forge-fe
          - tt-torch
          - tt-xla

    runs-on: ${{ matrix.runs-on }}
    container:
      image: ${{ needs.build-tt-forge-slim.outputs.docker-image-harbor }}
      options: --device /dev/tenstorrent --user forge
      volumes:
        - /dev/hugepages:/dev/hugepages
        - /dev/hugepages-1G:/dev/hugepages-1G
        - /etc/udev/rules.d:/etc/udev/rules.d
        - /lib/modules:/lib/modules
        - /opt/tt_metal_infra/provisioning/provisioning_env:/opt/tt_metal_infra/provisioning/provisioning_env

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check ${{ matrix.frontend }}
        shell: bash
        run: |
          source /home/forge/venv-${{ matrix.frontend }}/bin/activate
          pip list | grep -E 'tt_|tt-|pjrt-' # Print installed version
          python benchmark/${{ matrix.frontend }}/demo_test.py


  demo-test-tt-forge-slim:
    name: Demo ${{ matrix.demos.frontend }} ${{ matrix.demos.demo }} on ${{ matrix.runs-on }}
    needs:
      - build-tt-forge-slim
      - basic-test-tt-forge-slim
    strategy:
      fail-fast: false
      matrix:
        runs-on:
          - tt-beta-ubuntu-2204-n150-large-stable
          - tt-beta-ubuntu-2204-p150b-large-stable
        demos:
          # - { "frontend": "tt-forge-fe", "demo": "cnn/mobile_netv2_demo.py" }
          # - { "frontend": "tt-forge-fe", "demo": "cnn/resnet_50_demo.py" }
          - { "frontend": "tt-forge-fe", "demo": "cnn/resnet_onnx_demo.py" }
          - { "frontend": "tt-forge-fe", "demo": "nlp/bert_demo.py" }
          # - { "frontend": "tt-torch", "demo": "cnn/mobile_netv2_demo.py" }
          # - { "frontend": "tt-torch", "demo": "resnet50_benchmark.py" }

    runs-on: ${{ matrix.runs-on }}
    container:
      image: ${{ needs.build-tt-forge-slim.outputs.docker-image-harbor }}
      options: --device /dev/tenstorrent --user forge
      volumes:
        - /dev/hugepages:/dev/hugepages
        - /dev/hugepages-1G:/dev/hugepages-1G
        - /etc/udev/rules.d:/etc/udev/rules.d
        - /lib/modules:/lib/modules
        - /opt/tt_metal_infra/provisioning/provisioning_env:/opt/tt_metal_infra/provisioning/provisioning_env

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run ${{ matrix.demos.frontend }} demo ${{ matrix.demos.demo }}
        shell: bash
        run: |
          source /home/forge/venv-${{ matrix.demos.frontend }}/bin/activate
          pip list | grep -E 'tt_|tt-|pjrt-' # Print installed version
          python demos/${{ matrix.demos.frontend }}/${{ matrix.demos.demo }}
