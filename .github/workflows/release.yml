name: Release

on:
  workflow_call:
    inputs:
      draft:
        type: boolean
        default: true
        description: Put PR in draft mode for testing
      repo:
        type: string
        description: 'Repo to release e.g tt-forge-fe'
        required: true
        default: ''
      repo_short:
        type: string
        description: 'Repo short name'
        required: true
      release_type:
        type: string
        description: 'Release type'
        required: true
      overwrite_releases:
        type: boolean
        default: false
        description: Overwrite releases
      new_version_tag:
        type: string
        description: 'New version tag for wheel'
        required: false
      branch:
        type: string
        description: 'Branch to release e.g main'
        required: false
        default: ''
      latest_branch_commit:
        type: string
        description: 'Latest branch commit'
        required: false
        default: ''
      current_release_tag_commit:
        type: string
        description: 'Current release tag commit'
        required: false
        default: ''
      override_release_fact_workflow:
        type: string
        description: 'Override release facts workflow'
        required: false
        default: ''

permissions:
  pages: write
  id-token: write
  contents: write
  actions: write
  packages: write
  attestations: write

jobs:

  generate-seed:
    outputs:
      id: ${{ steps.random.outputs.id }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - uses: ./.github/actions/random
      id: random
      with:
        draft: ${{ inputs.draft }}

  build-release:
    needs: generate-seed
    name: "${{ inputs.draft && 'Draft' || '' }} Build Release ${{ inputs.repo_short }} ${{ inputs.release_type }} ${{ inputs.new_version_tag}} ${{ inputs.branch }}"
    outputs:
      release-artifacts-id: ${{ steps.build-release-wheel.outputs.release-artifacts-id }}
      check-tag: ${{ steps.check-tag.outputs.exists }}
      target_commit: ${{ steps.build-release-wheel.outputs.target_commit }}
      harbor_image_tag: ${{ steps.docker-build-push.outputs.harbor_image_tag }}
      workflow_run_status_symbol: ${{ steps.build-release-wheel.outputs.workflow_run_status_symbol }}
      workflow_run_url: ${{ steps.build-release-wheel.outputs.workflow_run_url }}

    runs-on: ubuntu-latest
    env:
        GH_TOKEN: ${{ github.token }}
    steps:
    - uses: actions/checkout@v4
    - uses: ./.github/actions/set-release-facts
      id: set-release-facts
      with:
        repo: ${{ inputs.repo }}
        release_type: ${{ inputs.release_type }}
        draft: ${{ inputs.draft }}
        new_version_tag: ${{ inputs.new_version_tag }}
        latest_branch_commit: ${{ inputs.latest_branch_commit }}

    - uses: mukunku/tag-exists-action@v1.6.0
      if: ${{ !inputs.overwrite_releases }}
      id: check-tag
      with:
        tag: "${{ steps.set-release-facts.outputs.gh_new_version_tag }}"
        repo: ${{ inputs.draft && 'tenstorrent/tt-forge' || steps.set-release-facts.outputs.repo_full }}

    - name: Build Release Wheel
      if: ${{ inputs.draft || inputs.overwrite_releases || (inputs.overwrite_releases && steps.set-release-facts.outputs.event_name == 'workflow_dispatch') || steps.check-tag.outputs.exists == 'false' }}
      id: build-release-wheel
      uses: ./.github/actions/build-release-wheel
      with:
        draft: ${{ inputs.draft }}
        repo: ${{ steps.set-release-facts.outputs.repo_full }}
        release_type: ${{ inputs.release_type }}
        branch: ${{ inputs.branch || 'main' }}
        new_version_tag: ${{ steps.set-release-facts.outputs.build_release_tag }}
        unique_artifact_suffix: ${{ needs.generate-seed.outputs.id }}
        override_release_fact_workflow: ${{ inputs.override_release_fact_workflow }}

    - name: Build Single Wheel Docker Image ${{ steps.set-release-facts.outputs.repo_short }} ${{ steps.set-release-facts.outputs.build_release_tag }}
      if: ${{ (steps.set-release-facts.outputs.skip_docker_build == 'false' && steps.check-tag.outputs.exists == 'false') || (steps.set-release-facts.outputs.skip_docker_build == 'false' && inputs.overwrite_releases) }}
      id: docker-build-push
      uses: ./.github/actions/docker-build-push
      with:
        image_name: "ghcr.io/tenstorrent/${{ steps.set-release-facts.outputs.repo_short }}-slim"
        docker_tag: ${{ steps.set-release-facts.outputs.build_release_tag }}
        make_latest: false
        force_rebuild: ${{ inputs.overwrite_releases }}
        dockerfile: ".github/Dockerfile.single-wheel-slim"
        build_args: "--build-arg REPO_SHORT=${{ steps.set-release-facts.outputs.repo_short }} --build-arg WHEEL_FILES_PATH=${{ steps.build-release-wheel.outputs.wheel_files_path }}"

  test-release:
    name: "${{ inputs.draft && 'Draft' || '' }} Test Release ${{ inputs.repo_short }} ${{ inputs.release_type }} ${{ inputs.new_version_tag}} ${{ inputs.branch }}"
    if: ${{ inputs.draft || inputs.overwrite_releases || needs.build-release.outputs.check-tag == 'false'  }}
    needs:
      - build-release
      - generate-seed
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: ./.github/actions/set-release-facts
        id: set-release-facts
        with:
          repo: ${{ inputs.repo }}
          release_type: ${{ inputs.release_type }}
          draft: ${{ inputs.draft }}
          new_version_tag: ${{ inputs.new_version_tag }}

      - name: Trigger Docker Basic test ${{ steps.set-release-facts.outputs.repo_short }}
        if: ${{  steps.set-release-facts.outputs.skip_docker_build == 'false' }}
        uses: ./.github/actions/trigger-workflow
        env:
          GH_TOKEN: ${{ github.token }}
        with:
          workflow_name: "Basic tests"
          parent_run_id: "${{ steps.set-release-facts.outputs.repo_short }}-${{ steps.set-release-facts.outputs.gh_new_version_tag }}-${{ needs.generate-seed.outputs.id }}"
          wait: true
          json_params: '{"docker-image": "${{ needs.build-release.outputs.harbor_image_tag }}", "only_frontend": "${{ steps.set-release-facts.outputs.repo_short }}" }'

  publish-release:
    name: "${{ inputs.draft && 'Draft' || '' }} Publish Release ${{ inputs.repo_short }} ${{ inputs.release_type }} ${{ inputs.new_version_tag}} ${{ inputs.branch }}"
    if: ${{ inputs.draft || inputs.overwrite_releases || needs.build-release.outputs.check-tag == 'false'  }}
    needs:
      - build-release
      - test-release
      - generate-seed
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: ./.github/actions/set-release-facts
        id: set-release-facts
        with:
          repo: ${{ inputs.repo }}
          release_type: ${{ inputs.release_type }}
          draft: ${{ inputs.draft }}
          new_version_tag: ${{ inputs.new_version_tag }}

      - name: Download Release Artifacts
        id: download-release-artifacts
        uses: actions/download-artifact@v4
        with:
          artifact-ids: ${{ needs.build-release.outputs.release-artifacts-id }}
          path: ${{ github.workspace }}/release

      - name: Set to latest Docker Image ${{ steps.set-release-facts.outputs.repo_short }} ${{ steps.set-release-facts.outputs.build_release_tag }}
        if: ${{  steps.set-release-facts.outputs.skip_docker_build == 'false' }}
        id: docker-build-push
        uses: ./.github/actions/docker-build-push
        with:
          image_name: "ghcr.io/tenstorrent/${{ steps.set-release-facts.outputs.repo_short }}-slim"
          docker_tag: ${{ steps.set-release-facts.outputs.build_release_tag }}
          make_latest: ${{ steps.set-release-facts.outputs.make_latest }}

      - uses: ./.github/actions/publish-tenstorrent-pypi
        # Skip Wheel PyPI upload in workflow test
        if: ${{ !inputs.draft }}
        #if: ${{ !inputs.draft && '${{ github.head_ref || github.ref_name }}' == 'main' }}
        with:
          release-artifacts-name: build-release-${{ inputs.repo_short }}
          release-artifacts-wheel-path: artifacts
          role-to-assume: ${{ secrets.PYPI_ROLE }}
          region: ${{ secrets.PYPI_REGION }}
          bucket: ${{ secrets.PYPI_BUCKET }}
          new_version_tag: ${{ steps.set-release-facts.outputs.new_version_tag }}
          repo: ${{ inputs.repo }}
          overwrite_releases: ${{ inputs.overwrite_releases }}

      - name: Generate docs
        uses: ./.github/actions/docs-generator
        env:
          GH_TOKEN: ${{ github.token }}
        with:
          repo_short: ${{ steps.set-release-facts.outputs.repo_short }}
          repo_full: ${{ steps.set-release-facts.outputs.repo_full }}
          release_type: ${{ inputs.release_type }}
          latest_commit: ${{ needs.build-release.outputs.target_commit }}
          new_version_tag: ${{ steps.set-release-facts.outputs.build_release_tag }}
          pip_wheel_names: ${{ steps.set-release-facts.outputs.pip_wheel_names }}
          skip_docker_build: ${{ steps.set-release-facts.outputs.skip_docker_build }}
          make_latest: ${{ steps.set-release-facts.outputs.make_latest }}
          workflow_run_status_symbol: ${{ needs.build-release.outputs.workflow_run_status_symbol }}
          workflow_run_url: ${{ needs.build-release.outputs.workflow_run_url }}
          git_log_fail_on_error: ${{ steps.set-release-facts.outputs.git_log_fail_on_error }}

      - uses: ./.github/actions/publish-github-release
        with:
          draft: ${{ inputs.draft }}
          repo: ${{ steps.set-release-facts.outputs.repo_full }}
          release_type: ${{ inputs.release_type }}
          release_token: ${{ secrets.TT_FORGE_RELEASER }}
          new_version_tag: ${{ steps.set-release-facts.outputs.gh_new_version_tag }}
          target_commit: ${{ needs.build-release.outputs.target_commit }}
          repo_short: ${{ inputs.repo_short }}
          prerelease: ${{ inputs.prerelease || steps.set-release-facts.outputs.prerelease }}
          release-artifacts-id: ${{ needs.build-release.outputs.release-artifacts-id }}
          unique_artifact_suffix: ${{ needs.generate-seed.outputs.id }}
          make_latest: ${{ inputs.make_latest || steps.set-release-facts.outputs.make_latest }}

      - uses: ./.github/actions/push-tag
        # Used for testing since draft release to do not create tags.
        if: ${{ inputs.release_type != 'nightly' && inputs.draft }}
        with:
          repo: ${{ inputs.repo }}
          draft: ${{ inputs.draft }}
          GH_TOKEN: ${{ secrets.TT_FORGE_RELEASER }}
          new_version_tag: ${{ steps.set-release-facts.outputs.gh_new_version_tag }}
          commit: ${{ inputs.latest_branch_commit }}
