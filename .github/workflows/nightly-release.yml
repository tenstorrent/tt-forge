name: Nightly Release

on:
  schedule:
  - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      draft:
        type: boolean
        default: true
        description: Put PR in draft mode for testing


jobs:
  nightly-release:
    runs-on: ubuntu-latest
    env:
        GH_TOKEN: ${{ github.token }}
    steps:
    - uses: actions/checkout@v4
    - name: version tag
      id: version-tag
      run: |
        tag="$(date +"%Y%m%d%H%M%S").nightly"
        echo "tag=$tag" >> $GITHUB_OUTPUT
    - name: Uplift tenstorrent/tt-forge-fe nightly artifacts
      uses: ./.github/actions/uplift-artifacts
      id: tt-forge-fe-artifacts
      with:
        repo: tenstorrent/tt-forge-fe
        branch: "main"
        workflow: On nightly
        artifact_download_glob: '*{wheel,test-reports}*'
        artifact_cleanup_glob: '*{.json,benchmark_}*'
        workflow_allow_failed: true
        workflow_result_in_job: "fail-notify"
    - name: Uplift tenstorrent/tt-torch nightly artifacts
      uses: ./.github/actions/uplift-artifacts
      id: tt-torch-artifacts
      with:
        repo: tenstorrent/tt-torch
        branch: "main"
        workflow: Nightly Tests
        artifact_download_glob: '*{install-artifacts,test-reports-models-}*'
        artifact_cleanup_glob: 'torchvision*'
        workflow_allow_failed: true
    - name: Uplift tenstorrent/tt-mlir artifacts
      uses: ./.github/actions/uplift-artifacts
      id: tt-mlir-artifacts
      with:
        repo: tenstorrent/tt-mlir
        branch: "main"
        workflow: On push
        artifact_download_glob: '*ttmlir-wheel*'
        workflow_allow_failed: true
    - name: Update Wheel versions
      env:
        WHEEL_VERSION: ${{ steps.version-tag.outputs.tag }}
        WHEEL_ROOT_PATH: ${{ github.workspace }}/release/artifacts
      run: ./.github/scripts/wheel-version-updater.sh
    - name: Create model compatible table
      working-directory: ./.github/scripts/model-compatible-table
      env:
        XML_ROOT: ${{ github.workspace }}/release/artifacts
        FILE_OUTPUT: ${{ github.workspace }}/release/docs/readme_hardware_table.md
        URL_SHAS: '{"tt-forge-fe": "${{ steps.tt-forge-fe-artifacts.outputs.run-commit-sha }}", "tt-torch": "${{ steps.tt-torch-artifacts.outputs.run-commit-sha }}"}'
      run: |
        readme_path="${{ github.workspace }}/release/docs"
        mkdir -p $readme_path
        python3 -m venv venv
        source venv/bin/activate
        pip install -r requirements.txt
        python main.py
        # Clean up XML files
        find ${{ github.workspace }}/release/artifacts -type f -iname "*.xml" -delete
    - name: tt-forge-fe-docs
      uses: ./.github/actions/docs-generator
      with:
        owner: tenstorrent
        repo: tt-forge-fe
        artifact_job_json: "${{ toJSON(steps.tt-forge-fe-artifacts.outputs) }}"
        release_type: 'nightly'
    - name: tt-torch-docs
      uses: ./.github/actions/docs-generator
      with:
        owner: tenstorrent
        repo: tt-torch
        artifact_job_json: "${{ toJSON(steps.tt-torch-artifacts.outputs) }}"
        release_type: 'nightly'
    - name: tt-mlir-docs
      uses: ./.github/actions/docs-generator
      with:
        owner: tenstorrent
        repo: tt-mlir
        artifact_job_json: "${{ toJSON(steps.tt-mlir-artifacts.outputs) }}"
        release_type: 'nightly'
    - name: cat readme
      run: |
        cat ${{ github.workspace }}/release/docs/readme_hardware_table.md >> ${{ github.workspace }}/release/docs/readme
    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        body_path: "${{ github.workspace }}/release/docs/readme"
        token: ${{ github.token }}
        name: ${{ steps.version-tag.outputs.tag }}
        tag_name: ${{ steps.version-tag.outputs.tag }}
        draft: ${{ github.event.inputs.draft  || false }}
        prerelease: true
        fail_on_unmatched_files: true
        files: |
          ${{ github.workspace }}/release/artifacts/**
    - name: Prune Nightly releases
      if: ${{ !github.event.inputs.draft || true }}
      shell: bash
      run: .github/scripts/prune-nightly-releases.sh


  fail-notify:
    if: always()
    needs:
      - nightly-release
    runs-on: ubuntu-latest
    outputs:
      is-main: ${{ steps.branch-check.outputs.IS_MAIN }}
      failed: ${{ steps.check.outputs.failure }}
    steps:
      - name: Check if branch is main
        id: branch-check
        run: echo "IS_MAIN=$(if [ '${{ github.ref }}' == 'refs/heads/main' ]; then echo true; else echo false; fi)" >> $GITHUB_OUTPUT
      - name: Check if the needed jobs succeeded or failed
        id: check
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}

  fail-send-msg:
    if: always()
    needs:
      - fail-notify
    runs-on: ubuntu-latest
    steps:
      - name: Send Fail Notification
        if: ${{ needs.fail-notify.outputs.failed == 'true' && needs.fail-notify.outputs.is-main == 'true' }}
        uses: slackapi/slack-github-action@v1.26.0
        with:
          payload: |
            {
              "text": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }}",
              "channel": "C088QN7E0R3"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_NIGHTLY_FAIL }}
