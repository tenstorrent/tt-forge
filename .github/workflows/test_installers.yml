
name: Test Released Installers

on:
  workflow_dispatch:
  push:

env:
  GH_TOKEN: ${{ github.token }}

jobs:
  test-installers:
    name: Test ${{ matrix.project }} Installer
    runs-on: tt-beta-ubuntu-2204-n150-large-stable
    strategy:
      fail-fast: false
      matrix:
        project: [tt-torch, tt-forge-fe]
        include:
          - project: tt-torch
            test_script: tests/test_basic.py
          - project: tt-forge-fe
            test_script: tests/test_basic.py

    container:
      image: ubuntu:22.04
      options: "--device /dev/tenstorrent"
      volumes:
        - /dev/hugepages:/dev/hugepages
        - /dev/hugepages-1G:/dev/hugepages-1G
        - /etc/udev/rules.d:/etc/udev/rules.d
        - /lib/modules:/lib/modules
        - /opt/tt_metal_infra/provisioning/provisioning_env:/opt/tt_metal_infra/provisioning/provisioning_env

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: common/dependencies.txt
          sparse-checkout-cone-mode: false

      - name: Install Dependencies
        shell: bash
        run: |
          apt-get update -qq >/dev/null 2>&1
          # Install dependencies from file
          xargs apt-get install -y -qq --no-install-recommends < common/dependencies.txt
          
          GH_CLI_VERSION="2.67.0"
          echo "Current gh version:"
          gh --version
          if ! gh --version | grep -q "gh version ${GH_CLI_VERSION}"; then
              wget -q https://github.com/cli/cli/releases/download/v${GH_CLI_VERSION}/gh_${GH_CLI_VERSION}_linux_amd64.tar.gz
              tar -xvf gh_${GH_CLI_VERSION}_linux_amd64.tar.gz >/dev/null
              cd gh_${GH_CLI_VERSION}_linux_amd64
              install -m 755 bin/gh /usr/local/bin
              cd ..
          fi

      - name: Download and install latest ${{ matrix.project }} installer
        shell: bash
        run: |
            GH_REPO=tenstorrent/tt-forge            
            LATEST_RELEASE=$(gh release list -R $GH_REPO --limit 1 --json tagName -q ".[0].tagName")
            echo "Download latest release: $LATEST_RELEASE"
            if [ "${{ matrix.project }}" == "tt-forge-fe" ]; then
                gh release download $LATEST_RELEASE -R $GH_REPO --pattern "forge*.whl"
                gh release download $LATEST_RELEASE -R $GH_REPO --pattern "tvm*.whl"
            fi
            if [ "${{ matrix.project }}" == "tt-torch" ]; then
                gh release download $LATEST_RELEASE -R $GH_REPO --pattern "tt_torch*.whl"
            fi

            # Install to separate venv
            echo "Installing to separate venv"
            VENV_DIR=/tmp/venv_${{ matrix.project }}
            echo "venv_dir=$VENV_DIR" >> $GITHUB_ENV
            echo "Creating venv"
            python3 -m venv $VENV_DIR            

            echo "Installing wheels and test dependencies"
            source $VENV_DIR/bin/activate
            pip install *.whl
            pip install pytest

      - name: Run Tests
        shell: bash
        run: |
            source ${{ env.venv_dir }}/bin/activate
            echo "Downloading test file from GitHub"
            if [ "${{ matrix.project }}" == "tt-forge-fe" ]; then
                curl -s https://raw.githubusercontent.com/tenstorrent/tt-forge-fe/main/forge/test/test_api.py -o test_api.py            
                echo "Running test file"
                pytest -svv test_api.py
            fi
            if [ "${{ matrix.project }}" == "tt-torch" ]; then
                curl -s https://raw.githubusercontent.com/tenstorrent/tt-torch/main/tests/torch/test_basic.py -o test_basic.py            
                echo "Running test file"
                pip install onnx # workaround, we need to fix this
                pytest -svv test_basic.py
            fi
