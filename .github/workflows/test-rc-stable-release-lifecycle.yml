
name: Test Release RC/Stable Lifecycle
on:
    push:
      branches:
        - main
      paths:
        - '.github/scripts/model-compatible-table/**'
        - '.github/scripts/wheel-version-updater.sh'
        - '.github/scripts/prune-nightly-branches.sh'
        - '.github/workflows/update-release.yml'
        - '.github/workflows/daily-releaser.yml'
        - '.github/workflows/nightly-release.yml'
        - '.github/workflows/release.yml'
        - '.github/workflows/create-version-branches.yml'
        - '.github/workflows/bump-version.yml'
        - '.github/workflows/promote-stable.yml'
        - '.github/actions/add-commit/**'
        - '.github/actions/create-rc-branch/**'
        - '.github/actions/docs-generator/**'
        - '.github/actions/find-workflow/**'
        - '.github/actions/get-release-branches/**'
        - '.github/actions/get-repos/**'
        - '.github/actions/build-release/**'
        - '.github/actions/uplift-artifacts/**'
        - '.github/actions/set-release-facts/**'
        - '.github/actions/install-verification/**'
        - '.github/actions/publish-tenstorrent-pypi/**'
        - '.github/actions/trigger-workflow/**'
        - '.github/actions/wait-workflow/**'
        - '.github/actions/publish-github-release/**'
        - '.github/workflows/test-nightly-releaser.yml'
        - '.github/workflows/test-rc-stable-release-lifecycle.yml'
        - '.github/scripts/pyproject.toml'
        - '.github/scripts/template-setup.py'
    pull_request:
      types: [opened, synchronize, reopened, ready_for_review]
      branches: [ "main" ]
      paths:
        - '.github/scripts/model-compatible-table/**'
        - '.github/scripts/wheel-version-updater.sh'
        - '.github/scripts/prune-nightly-branches.sh'
        - '.github/workflows/update-release.yml'
        - '.github/workflows/daily-releaser.yml'
        - '.github/workflows/nightly-release.yml'
        - '.github/workflows/release.yml'
        - '.github/workflows/create-version-branches.yml'
        - '.github/workflows/bump-version.yml'
        - '.github/workflows/promote-stable.yml'
        - '.github/actions/add-commit/**'
        - '.github/actions/create-rc-branch/**'
        - '.github/actions/docs-generator/**'
        - '.github/actions/find-workflow/**'
        - '.github/actions/get-release-branches/**'
        - '.github/actions/get-repos/**'
        - '.github/actions/build-release/**'
        - '.github/actions/uplift-artifacts/**'
        - '.github/actions/set-release-facts/**'
        - '.github/actions/install-verification/**'
        - '.github/actions/publish-tenstorrent-pypi/**'
        - '.github/actions/trigger-workflow/**'
        - '.github/actions/wait-workflow/**'
        - '.github/actions/publish-github-release/**'
        - '.github/workflows/test-nightly-releaser.yml'
        - '.github/workflows/test-rc-stable-release-lifecycle.yml'
        - '.github/scripts/pyproject.toml'
        - '.github/scripts/template-setup.py'
    workflow_dispatch:
      inputs:
        delete-drafts:
          type: boolean
          default: true
          description: Delete drafts

permissions:
  pages: write
  id-token: write
  contents: write
  actions: write
  packages: write
  attestations: write

jobs:

  get-repos:
    outputs:
      json_results: ${{ steps.get-repos.outputs.json_results }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get Repos
        id: get-repos
        uses: ./.github/actions/get-repos
        with:
          repo: 'tt-mlir'

  mock-successful-workflow-pre-release-branch:
    outputs:
      run_head_sha: ${{ steps.trigger-workflow.outputs.run_head_sha }}
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/trigger-workflow
        id: trigger-workflow
        with:
          workflow_name: 'Mock Successful'
          wait: true

  create-version-branch:
    needs:
      - get-repos
      - mock-successful-workflow-pre-release-branch
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.get-repos.outputs.json_results) }}
    name: ${{ matrix.repo_short }} Create Version branch
    uses: ./.github/workflows/create-version-branches.yml
    secrets: inherit
    with:
      repo: ${{ matrix.repo }}
      draft: true
      draft_slug_name: ${{ matrix.repo_short }}
      workflow_allow_failed: false
      workflow: 'Mock Successful'
      commit: ${{ needs.mock-successful-workflow-pre-release-branch.outputs.run_head_sha }}
      ignore_artifacts: true

  get-release-branches:
    outputs:
      json_results: ${{ steps.get-release-branches.outputs.json_results }}
      no_release_branches_or_new_commits: ${{ steps.get-release-branches.outputs.no_release_branches_or_new_commits }}
    needs:
      - get-repos
      - create-version-branch
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.get-repos.outputs.json_results) }}
    name: ${{ matrix.repo_short }} Get Release RC Branches
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get Release Branches
        id: get-release-branches
        uses: ./.github/actions/get-release-branches
        with:
          repo: ${{ matrix.repo }}
          repo_short: ${{ matrix.repo_short }}
          draft: true
          ignore_update_check: true

  first-commit-successful-pre-release-branch:
    needs:
      - get-release-branches
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.get-release-branches.outputs.json_results) }}
    name: ${{ matrix.repo_short }} First RC Commit Successful
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - uses: actions/checkout@v4
      - name: Add random test file
        uses: ./.github/actions/add-commit
        with:
          branch: ${{ matrix.branch }}
      - uses: actions/checkout@v4
      - uses: ./.github/actions/trigger-workflow
        with:
          workflow_name: 'Mock Successful'
          wait: true
          branch: ${{ matrix.branch }}


  release-rc-first-commit-observed:
    needs:
      - get-repos
      - first-commit-successful-pre-release-branch
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.get-repos.outputs.json_results) }}
    uses: ./.github/workflows/update-releases.yml
    secrets: inherit
    name: ${{ matrix.repo_short }} Update RC on observed first commit
    with:
      draft: true
      repo: ${{ matrix.repo }}
      overwrite_releases: false

  second-commit-successful-pre-release-branch:
    needs:
      - get-release-branches
      - release-rc-first-commit-observed
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.get-release-branches.outputs.json_results) }}
    name: ${{ matrix.repo_short }} Second RC Commit Successful
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - uses: actions/checkout@v4
      - name: Add random test file
        uses: ./.github/actions/add-commit
        with:
          branch: ${{ matrix.branch }}
      - uses: actions/checkout@v4
      - uses: ./.github/actions/trigger-workflow
        with:
          workflow_name: 'Mock Successful'
          wait: true
          branch: ${{ matrix.branch }}

  bump-rc-version-observed:
    needs:
      - second-commit-successful-pre-release-branch
      - get-release-branches
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.get-release-branches.outputs.json_results) }}
    uses: ./.github/workflows/bump-version.yml
    secrets: inherit
    name: ${{ matrix.repo_short }} Bump RC Version on observed second commit
    with:
      draft: true
      repo: ${{ matrix.repo }}
      branch: ${{ matrix.branch }}

  promote-stable:
    needs:
      - get-repos
      - bump-rc-version-observed
      - get-release-branches
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.get-release-branches.outputs.json_results) }}
    name: ${{ matrix.repo_short }} Promote RC to Stable
    secrets: inherit
    uses: ./.github/workflows/promote-stable.yml
    with:
      draft: true
      repo: ${{ matrix.repo }}
      release_branch: ${{ matrix.branch }}

  first-commit-successful-stable-branch:
    needs:
      - get-release-branches
      - promote-stable
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.get-release-branches.outputs.json_results) }}
    name: ${{ matrix.repo_short }} First Stable/Patch Commit Successful
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - uses: actions/checkout@v4
      - name: Add random test file
        uses: ./.github/actions/add-commit
        with:
          branch: ${{ matrix.branch }}
      - uses: actions/checkout@v4
      - uses: ./.github/actions/trigger-workflow
        with:
          workflow_name: 'Mock Successful'
          wait: true
          branch: ${{ matrix.branch }}

  release-stable-first-commit-observed:
    needs:
      - get-repos
      - first-commit-successful-stable-branch
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.get-repos.outputs.json_results) }}
    uses: ./.github/workflows/update-releases.yml
    secrets: inherit
    name: ${{ matrix.repo_short }} Update Stable on observed first commit
    with:
      draft: true
      repo: ${{ matrix.repo }}
      overwrite_releases: false

  second-commit-successful-stable-branch:
    needs:
      - get-release-branches
      - release-stable-first-commit-observed
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.get-release-branches.outputs.json_results) }}
    name: ${{ matrix.repo_short }} Second Stable/Patch Commit Successful
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - uses: actions/checkout@v4
      - name: Add random test file
        uses: ./.github/actions/add-commit
        with:
          branch: ${{ matrix.branch }}
      - uses: actions/checkout@v4
      - uses: ./.github/actions/trigger-workflow
        with:
          workflow_name: 'Mock Successful'
          wait: true
          branch: ${{ matrix.branch }}

  bump-stable-version-observed:
    needs:
      - second-commit-successful-stable-branch
      - get-release-branches
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.get-release-branches.outputs.json_results) }}
    uses: ./.github/workflows/bump-version.yml
    secrets: inherit
    name: ${{ matrix.repo_short }} Bump Stable Version on observed second commit
    with:
      draft: true
      repo: ${{ matrix.repo }}
      branch: ${{ matrix.branch }}


  validate-draft-artifacts:
    if: always()
    needs:
      - bump-stable-version-observed
      - get-repos
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.get-repos.outputs.json_results) }}
    name: ${{ matrix.repo_short }} Validate Draft Artifacts
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read version file
        id: read-version
        run: |
          source .version
          echo "major=$MAJOR" >> $GITHUB_OUTPUT
          echo "minor=$MINOR" >> $GITHUB_OUTPUT
          echo "patch=$PATCH" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set expected artifacts
        id: set-expected
        run: |
          # Expected tags based on the automation pattern
          expected_tags=(
            "draft.${{ matrix.repo_short }}.${{ steps.read-version.outputs.major }}.${{ steps.read-version.outputs.minor }}.0rc1"
            "draft.${{ matrix.repo_short }}.${{ steps.read-version.outputs.major }}.${{ steps.read-version.outputs.minor }}.0rc2"
            "draft.${{ matrix.repo_short }}.${{ steps.read-version.outputs.major }}.${{ steps.read-version.outputs.minor }}.0"
            "draft.${{ matrix.repo_short }}.${{ steps.read-version.outputs.major }}.${{ steps.read-version.outputs.minor }}.1"
            "draft.${{ matrix.repo_short }}.${{ steps.read-version.outputs.major }}.${{ steps.read-version.outputs.minor }}.2"
          )

          # Expected branch
          expected_branch="draft-${{ matrix.repo_short }}-release-${{ steps.read-version.outputs.major }}.${{ steps.read-version.outputs.minor }}"

          # Convert arrays to space-separated strings for easier handling in bash
          echo "expected_tags=${expected_tags[*]}" >> $GITHUB_OUTPUT
          echo "expected_branch=$expected_branch" >> $GITHUB_OUTPUT

      - name: Validate draft tags exist
        run: |
          echo "Validating draft tags for ${{ matrix.repo_short }}..."

          # Get all tags
          git fetch --tags
          all_tags=$(git tag -l)

          # Check each expected tag
          missing_tags=()
          for tag in ${{ steps.set-expected.outputs.expected_tags }}; do
            if echo "$all_tags" | grep -q "^${tag}$"; then
              echo "✓ Tag $tag exists"
            else
              echo "✗ Tag $tag is missing"
              missing_tags+=("$tag")
            fi
          done

          # Report results
          if [ ${#missing_tags[@]} -eq 0 ]; then
            echo "✅ All expected tags are present"
          else
            echo "❌ Missing tags: ${missing_tags[*]}"
            exit 1
          fi

      - name: Validate draft branch exists
        run: |
          echo "Validating draft branch for ${{ matrix.repo_short }}..."

          # Get all remote branches
          git fetch --all
          all_branches=$(git branch -r)

          expected_branch="${{ steps.set-expected.outputs.expected_branch }}"

          if echo "$all_branches" | grep -q "origin/${expected_branch}$"; then
            echo "✅ Branch $expected_branch exists"
          else
            echo "❌ Branch $expected_branch is missing"
            echo "Available branches:"
            echo "$all_branches" | grep "draft-" || echo "No draft branches found"
            exit 1
          fi

      - name: Validate draft releases exist
        run: |
          echo "Validating draft releases for ${{ matrix.repo_short }}..."

          # Get all releases from the repository
          releases=$(gh release list --repo tenstorrent/tt-forge --limit 100 --json tagName,isDraft | jq -r '.[] | select(.isDraft == true) | .tagName')

          # Check each expected tag has a corresponding draft release
          missing_releases=()
          for tag in ${{ steps.set-expected.outputs.expected_tags }}; do
            if echo "$releases" | grep -q "^${tag}$"; then
              echo "✓ Draft release $tag exists"
            else
              echo "✗ Draft release $tag is missing"
              missing_releases+=("$tag")
            fi
          done

          # Report results
          if [ ${#missing_releases[@]} -eq 0 ]; then
            echo "✅ All expected draft releases are present"
          else
            echo "❌ Missing draft releases: ${missing_releases[*]}"
            echo "Available draft releases:"
            echo "$releases" | grep "draft.${{ matrix.repo_short }}" || echo "No matching draft releases found"
            exit 1
          fi

      - name: Validate version file consistency
        run: |
          echo "Validating version file consistency..."

          # Check that the version file matches our expectations
          source .version

          if [ "$MAJOR" != "${{ steps.read-version.outputs.major }}" ]; then
            echo "❌ Version file MAJOR mismatch: expected ${{ steps.read-version.outputs.major }}, got $MAJOR"
            exit 1
          fi

          if [ "$MINOR" != "${{ steps.read-version.outputs.minor }}" ]; then
            echo "❌ Version file MINOR mismatch: expected ${{ steps.read-version.outputs.minor }}, got $MINOR"
            exit 1
          fi

          if [ "$PATCH" != "${{ steps.read-version.outputs.patch }}" ]; then
            echo "❌ Version file PATCH mismatch: expected ${{ steps.read-version.outputs.patch }}, got $PATCH"
            exit 1
          fi

          echo "✅ Version file is consistent: $VERSION"

      - name: Summary
        run: |
          echo "🎉 Validation completed successfully for ${{ matrix.repo_short }}!"
          echo "✅ All draft tags verified"
          echo "✅ Draft branch verified"
          echo "✅ All draft releases verified"
          echo "✅ Version file consistency verified"

  delete-draft-artifacts:
    if: always()
    needs:
      - validate-draft-artifacts
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout
        if: ${{ inputs.delete-drafts || true }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Delete test tags
        if: ${{ inputs.delete-drafts || true }}
        run: |
          set +e
          draft_tags=$(git tag -l | grep -oP "^draft\.tt-\w+\.\d\.\d\.\d.*" | xargs)
          set -e
          echo "draft_tags=$draft_tags"
          if [ -n "$draft_tags" ]; then
            git push origin --delete $draft_tags
          fi
      - name: Delete draft branch branches
        if: ${{ inputs.delete-drafts || true }}
        run: |
          set +e
          draft_branches=$(git branch -r | grep -oP "(?<=origin\/)draft-tt-\w+-release-\d\.\d$" | xargs)
          set -e
          echo "draft_branches=$draft_branches"
          if [ -n "$draft_branches" ]; then
            git push origin --delete $draft_branches
          fi
      - name: Delete draft releases
        if: ${{ inputs.delete-drafts || true }}
        run: |
          echo "Deleting draft releases..."
          draft_releases=$(gh release list --repo tenstorrent/tt-forge --limit 100 --json tagName,isDraft | jq -r '.[] | select(.isDraft == true) | select(.tagName | startswith("draft.tt-")) | .tagName')

          if [ -n "$draft_releases" ]; then
            echo "Found draft releases to delete:"
            echo "$draft_releases"

            # Delete each draft release
            echo "$draft_releases" | while read -r release_tag; do
              if [ -n "$release_tag" ]; then
                echo "Deleting draft release: $release_tag"
                gh release delete "$release_tag" --repo tenstorrent/tt-forge --yes || echo "Failed to delete release $release_tag"
              fi
            done
          else
            echo "No draft releases found to delete"
          fi
