<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="88" tests="104" time="1598.366" timestamp="2025-03-31T00:26:36.867236" hostname="f3f8b495f3ca"><testcase classname="forge.test.models.pytorch.audio.whisper.test_whisper" name="test_whisper[openai/whisper-medium]" time="0.097"><properties><property name="start_timestamp" value="2025-03-31T00:27:11" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:27:11" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/audio/whisper/test_whisper.py:38: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.multimodal.stable_diffusion.test_stable_diffusion" name="test_stable_diffusion_pytorch[CompVis/stable-diffusion-v1-4]" time="0.000"><skipped type="pytest.skip" message="unsupported for now">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/multimodal/stable_diffusion/test_stable_diffusion.py:13: unsupported for now</skipped></testcase><testcase classname="forge.test.models.pytorch.multimodal.vilt.test_vilt" name="test_vilt_question_answering_hf_pytorch[dandelin/vilt-b32-finetuned-vqa]" time="56.270"><properties><property name="start_timestamp" value="2025-03-31T00:27:11" /><property name="owner" value="tt-forge-fe" /><property name="group" value="generality" /><property name="tags" value="{'model_name': 'pt_vilt_dandelin_vilt_b32_finetuned_vqa_qa_hf', 'bringup_status': 'PASSED', 'pcc': 0.9913011021143829, 'atol': 1.3014068603515625, 'execution_stage': 'PASSED'}" /><property name="config" value="{'compiler': {'enable_training': False, 'enable_recompute': False, 'match_subgraph_patterns': None, 'enable_consteval': True, 'compile_subgraphs': False, 'enable_link_past_cache_ios': False, 'enable_pt2_fx_graph_link': False, 'compile_depth': 'FULL', 'enable_tvm_cpu_fallback': False, 'cpu_fallback_ops': ['embedding'], 'enable_tm_cpu_fallback': False, 'tm_cpu_fallback_max_depth': 10, 'enable_tvm_dropout': False, 'enable_tvm_unsupported_ops': False, 'enable_tvm_constant_prop': False, 'convert_framework_params_to_tvm': False, 'enable_xla_jax_convert': False, 'enable_tvm_jax_freeze_large_model': True, 'framework_model_output_names': [], 'tvm_constnat_prop_mask': [], 'compile_tvm_to_python': True, 'retain_tvm_python_files': False, 'tvm_graph_store_path': '', 'tvm_graph_load_path': '', 'tvm_module_to_num_patterns': {}, 'extract_tvm_unique_ops_config': False, 'tvm_generate_unique_ops_tests': False, 'export_tvm_unique_ops_config_details': False, 'loopback_outputs': {}, 'default_df_override': None, 'default_accumulate_df': None, 'enable_broadcast_splitting': False, 'default_math_fidelity': 'HiFi3', 'amp_level': None, 'fracture_groups': [], 'amp_properties': []}, 'verify': {'enabled': True, 'verify_size': True, 'verify_dtype': True, 'verify_shape': True, 'verify_values': True, 'value_checker': {'rtol': 1e-05, 'atol': 1e-08, 'pcc': 0.99, 'dissimilarity_threshold': 0.001}, 'dump_tensors': False, 'dump_tensors_path': ''}}" /><property name="end_timestamp" value="2025-03-31T00:28:07" /></properties></testcase><testcase classname="forge.test.models.pytorch.text.albert.test_albert" name="test_albert_masked_lm_pytorch[base-v2]" time="38.683"><properties><property name="start_timestamp" value="2025-03-31T00:28:07" /><property name="owner" value="tt-forge-fe" /><property name="group" value="generality" /><property name="tags" value="{'model_name': 'pt_albert_base_v2_mlm_hf', 'bringup_status': 'PASSED', 'pcc': 0.988290394659999, 'atol': 26.800519943237305, 'execution_stage': 'PASSED'}" /><property name="config" value="{'compiler': {'enable_training': False, 'enable_recompute': False, 'match_subgraph_patterns': None, 'enable_consteval': True, 'compile_subgraphs': False, 'enable_link_past_cache_ios': False, 'enable_pt2_fx_graph_link': False, 'compile_depth': 'FULL', 'enable_tvm_cpu_fallback': False, 'cpu_fallback_ops': ['embedding'], 'enable_tm_cpu_fallback': False, 'tm_cpu_fallback_max_depth': 10, 'enable_tvm_dropout': False, 'enable_tvm_unsupported_ops': False, 'enable_tvm_constant_prop': False, 'convert_framework_params_to_tvm': False, 'enable_xla_jax_convert': False, 'enable_tvm_jax_freeze_large_model': True, 'framework_model_output_names': [], 'tvm_constnat_prop_mask': [], 'compile_tvm_to_python': True, 'retain_tvm_python_files': False, 'tvm_graph_store_path': '', 'tvm_graph_load_path': '', 'tvm_module_to_num_patterns': {}, 'extract_tvm_unique_ops_config': False, 'tvm_generate_unique_ops_tests': False, 'export_tvm_unique_ops_config_details': False, 'loopback_outputs': {}, 'default_df_override': None, 'default_accumulate_df': None, 'enable_broadcast_splitting': False, 'default_math_fidelity': 'HiFi3', 'amp_level': None, 'fracture_groups': [], 'amp_properties': []}, 'verify': {'enabled': True, 'verify_size': True, 'verify_dtype': True, 'verify_shape': True, 'verify_values': True, 'value_checker': {'rtol': 1e-05, 'atol': 1e-08, 'pcc': 0.95, 'dissimilarity_threshold': 0.001}, 'dump_tensors': False, 'dump_tensors_path': ''}}" /><property name="end_timestamp" value="2025-03-31T00:28:46" /></properties></testcase><testcase classname="forge.test.models.pytorch.text.albert.test_albert" name="test_albert_masked_lm_pytorch[xlarge-v2]" time="0.102"><properties><property name="start_timestamp" value="2025-03-31T00:28:46" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:28:46" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/text/albert/test_albert.py:42: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.text.albert.test_albert" name="test_albert_token_classification_pytorch[large-v2]" time="0.101"><properties><property name="start_timestamp" value="2025-03-31T00:28:46" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:28:46" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/text/albert/test_albert.py:123: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.text.albert.test_albert" name="test_albert_token_classification_pytorch[xxlarge-v2]" time="0.101"><properties><property name="start_timestamp" value="2025-03-31T00:28:46" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:28:46" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/text/albert/test_albert.py:123: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.text.albert.test_albert" name="test_albert_sequence_classification_pytorch[textattack/albert-base-v2-imdb]" time="28.075"><properties><property name="start_timestamp" value="2025-03-31T00:28:46" /><property name="owner" value="tt-forge-fe" /><property name="group" value="generality" /><property name="tags" value="{'model_name': 'pt_albert_textattack_albert_base_v2_imdb_seq_cls_hf', 'bringup_status': 'PASSED', 'pcc': 1.0, 'atol': 0.08492565155029297, 'execution_stage': 'PASSED'}" /><property name="config" value="{'compiler': {'enable_training': False, 'enable_recompute': False, 'match_subgraph_patterns': None, 'enable_consteval': True, 'compile_subgraphs': False, 'enable_link_past_cache_ios': False, 'enable_pt2_fx_graph_link': False, 'compile_depth': 'FULL', 'enable_tvm_cpu_fallback': False, 'cpu_fallback_ops': ['embedding'], 'enable_tm_cpu_fallback': False, 'tm_cpu_fallback_max_depth': 10, 'enable_tvm_dropout': False, 'enable_tvm_unsupported_ops': False, 'enable_tvm_constant_prop': False, 'convert_framework_params_to_tvm': False, 'enable_xla_jax_convert': False, 'enable_tvm_jax_freeze_large_model': True, 'framework_model_output_names': [], 'tvm_constnat_prop_mask': [], 'compile_tvm_to_python': True, 'retain_tvm_python_files': False, 'tvm_graph_store_path': '', 'tvm_graph_load_path': '', 'tvm_module_to_num_patterns': {}, 'extract_tvm_unique_ops_config': False, 'tvm_generate_unique_ops_tests': False, 'export_tvm_unique_ops_config_details': False, 'loopback_outputs': {}, 'default_df_override': None, 'default_accumulate_df': None, 'enable_broadcast_splitting': False, 'default_math_fidelity': 'HiFi3', 'amp_level': None, 'fracture_groups': [], 'amp_properties': []}, 'verify': {'enabled': True, 'verify_size': True, 'verify_dtype': True, 'verify_shape': True, 'verify_values': True, 'value_checker': {'rtol': 1e-05, 'atol': 1e-08, 'pcc': 0.99, 'dissimilarity_threshold': 0.001}, 'dump_tensors': False, 'dump_tensors_path': ''}}" /><property name="end_timestamp" value="2025-03-31T00:29:14" /></properties></testcase><testcase classname="forge.test.models.pytorch.text.bert.test_bert" name="test_bert_masked_lm_pytorch[bert-base-uncased]" time="30.910"><properties><property name="start_timestamp" value="2025-03-31T00:29:14" /><property name="owner" value="tt-forge-fe" /><property name="group" value="generality" /><property name="tags" value="{'model_name': 'pt_bert_bert_base_uncased_mlm_hf', 'bringup_status': 'PASSED', 'pcc': 0.9976708915707769, 'atol': 1.8835668563842773, 'execution_stage': 'PASSED'}" /><property name="config" value="{'compiler': {'enable_training': False, 'enable_recompute': False, 'match_subgraph_patterns': None, 'enable_consteval': True, 'compile_subgraphs': False, 'enable_link_past_cache_ios': False, 'enable_pt2_fx_graph_link': False, 'compile_depth': 'FULL', 'enable_tvm_cpu_fallback': False, 'cpu_fallback_ops': ['embedding'], 'enable_tm_cpu_fallback': False, 'tm_cpu_fallback_max_depth': 10, 'enable_tvm_dropout': False, 'enable_tvm_unsupported_ops': False, 'enable_tvm_constant_prop': False, 'convert_framework_params_to_tvm': False, 'enable_xla_jax_convert': False, 'enable_tvm_jax_freeze_large_model': True, 'framework_model_output_names': [], 'tvm_constnat_prop_mask': [], 'compile_tvm_to_python': True, 'retain_tvm_python_files': False, 'tvm_graph_store_path': '', 'tvm_graph_load_path': '', 'tvm_module_to_num_patterns': {}, 'extract_tvm_unique_ops_config': False, 'tvm_generate_unique_ops_tests': False, 'export_tvm_unique_ops_config_details': False, 'loopback_outputs': {}, 'default_df_override': None, 'default_accumulate_df': None, 'enable_broadcast_splitting': False, 'default_math_fidelity': 'HiFi3', 'amp_level': None, 'fracture_groups': [], 'amp_properties': []}, 'verify': {'enabled': True, 'verify_size': True, 'verify_dtype': True, 'verify_shape': True, 'verify_values': True, 'value_checker': {'rtol': 1e-05, 'atol': 1e-08, 'pcc': 0.99, 'dissimilarity_threshold': 0.001}, 'dump_tensors': False, 'dump_tensors_path': ''}}" /><property name="end_timestamp" value="2025-03-31T00:29:45" /></properties></testcase><testcase classname="forge.test.models.pytorch.text.bert.test_bert" name="test_bert_question_answering_pytorch[phiyodr/bert-large-finetuned-squad2]" time="78.255"><properties><property name="start_timestamp" value="2025-03-31T00:29:45" /><property name="owner" value="tt-forge-fe" /><property name="group" value="generality" /><property name="tags" value="{'model_name': 'pt_bert_phiyodr_bert_large_finetuned_squad2_qa_hf', 'bringup_status': 'PASSED', 'pcc': 0.9956411764350805, 'atol': 0.4366338849067688, 'execution_stage': 'PASSED'}" /><property name="config" value="{'compiler': {'enable_training': False, 'enable_recompute': False, 'match_subgraph_patterns': None, 'enable_consteval': True, 'compile_subgraphs': False, 'enable_link_past_cache_ios': False, 'enable_pt2_fx_graph_link': False, 'compile_depth': 'FULL', 'enable_tvm_cpu_fallback': False, 'cpu_fallback_ops': ['embedding'], 'enable_tm_cpu_fallback': False, 'tm_cpu_fallback_max_depth': 10, 'enable_tvm_dropout': False, 'enable_tvm_unsupported_ops': False, 'enable_tvm_constant_prop': False, 'convert_framework_params_to_tvm': False, 'enable_xla_jax_convert': False, 'enable_tvm_jax_freeze_large_model': True, 'framework_model_output_names': [], 'tvm_constnat_prop_mask': [], 'compile_tvm_to_python': True, 'retain_tvm_python_files': False, 'tvm_graph_store_path': '', 'tvm_graph_load_path': '', 'tvm_module_to_num_patterns': {}, 'extract_tvm_unique_ops_config': False, 'tvm_generate_unique_ops_tests': False, 'export_tvm_unique_ops_config_details': False, 'loopback_outputs': {}, 'default_df_override': None, 'default_accumulate_df': None, 'enable_broadcast_splitting': False, 'default_math_fidelity': 'HiFi3', 'amp_level': None, 'fracture_groups': [], 'amp_properties': []}, 'verify': {'enabled': True, 'verify_size': True, 'verify_dtype': True, 'verify_shape': True, 'verify_values': True, 'value_checker': {'rtol': 1e-05, 'atol': 1e-08, 'pcc': 0.99, 'dissimilarity_threshold': 0.001}, 'dump_tensors': False, 'dump_tensors_path': ''}}" /><property name="end_timestamp" value="2025-03-31T00:31:03" /></properties></testcase><testcase classname="forge.test.models.pytorch.text.distilbert.test_distilbert" name="test_distilbert_sequence_classification_pytorch[distilbert-base-uncased-finetuned-sst-2-english]" time="0.102"><properties><property name="start_timestamp" value="2025-03-31T00:31:03" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:31:03" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/text/distilbert/test_distilbert.py:129: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.text.dpr.test_dpr" name="test_dpr_question_encoder_pytorch[facebook/dpr-question_encoder-multiset-base]" time="0.102"><properties><property name="start_timestamp" value="2025-03-31T00:31:03" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:31:03" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/text/dpr/test_dpr.py:94: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.text.falcon.test_falcon" name="test_falcon_3[tiiuae/Falcon3-7B-Base]" time="0.102"><properties><property name="start_timestamp" value="2025-03-31T00:31:03" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:31:03" /></properties><skipped type="pytest.skip" message="Insufficient host DRAM to run this model (requires a bit more than 36 GB)">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/text/falcon/test_falcon.py:68: Insufficient host DRAM to run this model (requires a bit more than 36 GB)</skipped></testcase><testcase classname="forge.test.models.pytorch.text.gemma.test_gemma_v1" name="test_gemma_pytorch_v1[google/gemma-1.1-2b-it]" time="0.000"><skipped type="pytest.skip" message="Insufficient host DRAM to run this model (requires a bit more than 22 GB during compile time)">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/text/gemma/test_gemma_v1.py:17: Insufficient host DRAM to run this model (requires a bit more than 22 GB during compile time)</skipped></testcase><testcase classname="forge.test.models.pytorch.text.gptneo.test_gptneo" name="test_gptneo_sequence_classification[EleutherAI/gpt-neo-1.3B]" time="0.101"><properties><property name="start_timestamp" value="2025-03-31T00:31:04" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:31:04" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/text/gptneo/test_gptneo.py:102: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.text.llama.test_llama3" name="test_llama3_causal_lm[meta-llama/Llama-3.2-1B]" time="0.101"><properties><property name="start_timestamp" value="2025-03-31T00:31:04" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:31:04" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/text/llama/test_llama3.py:136: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.text.llama.test_llama3" name="test_llama3_causal_lm[huggyllama/llama-7b]" time="0.101"><properties><property name="start_timestamp" value="2025-03-31T00:31:04" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:31:04" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/text/llama/test_llama3.py:136: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.text.llama.test_llama3" name="test_llama3_sequence_classification[meta-llama/Llama-3.2-1B]" time="0.101"><properties><property name="start_timestamp" value="2025-03-31T00:31:04" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:31:04" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/text/llama/test_llama3.py:197: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.text.llama.test_llama3" name="test_llama3_sequence_classification[huggyllama/llama-7b]" time="0.101"><properties><property name="start_timestamp" value="2025-03-31T00:31:04" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:31:04" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/text/llama/test_llama3.py:197: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.text.opt.test_opt" name="test_opt_qa[facebook/opt-1.3b]" time="0.101"><properties><property name="start_timestamp" value="2025-03-31T00:31:04" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:31:04" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/text/opt/test_opt.py:89: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.text.phi2.test_phi2" name="test_phi2_sequence_classification[microsoft/phi-2-pytdml]" time="0.102"><properties><property name="start_timestamp" value="2025-03-31T00:31:04" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:31:04" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/text/phi2/test_phi2.py:136: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.text.phi3.test_phi3" name="test_phi3_sequence_classification[microsoft/phi-3-mini-4k-instruct]" time="0.101"><properties><property name="start_timestamp" value="2025-03-31T00:31:04" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:31:04" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/text/phi3/test_phi3.py:127: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.text.qwen.test_qwen_coder" name="test_qwen_clm[Qwen/Qwen2.5-Coder-3B-Instruct]" time="0.101"><properties><property name="start_timestamp" value="2025-03-31T00:31:04" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:31:04" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/text/qwen/test_qwen_coder.py:31: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.text.qwen.test_qwen_v2" name="test_qwen_clm[Qwen/Qwen2.5-1.5B-Instruct]" time="0.101"><properties><property name="start_timestamp" value="2025-03-31T00:31:05" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:31:05" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/text/qwen/test_qwen_v2.py:36: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.text.qwen.test_qwen_v2" name="test_qwen_clm[Qwen/Qwen2.5-7B-Instruct]" time="0.101"><properties><property name="start_timestamp" value="2025-03-31T00:31:05" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:31:05" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/text/qwen/test_qwen_v2.py:36: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.timeseries.nbeats.test_nbeats" name="test_nbeats_with_generic_basis[generic_basis]" time="0.102"><properties><property name="start_timestamp" value="2025-03-31T00:31:05" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:31:05" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/timeseries/nbeats/test_nbeats.py:66: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.blazebase.test_blazepose" name="test_blaze_hand_pytorch" time="0.000"><skipped type="pytest.skip" message="dependent on CCM repo">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/blazebase/test_blazepose.py:135: dependent on CCM repo</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.bts.test_bts" name="test_bts_pytorch[densenet121_bts]" time="0.000"><skipped type="pytest.skip" message="dependent on CCM repo">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/bts/test_bts.py:25: dependent on CCM repo</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.ddrnet.test_ddrnet" name="test_ddrnet_pytorch[ddrnet23s]" time="0.000"><skipped type="pytest.skip" message="dependent on CCM repo">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/ddrnet/test_ddrnet.py:24: dependent on CCM repo</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.ddrnet.test_ddrnet" name="test_ddrnet_semantic_segmentation_pytorch[ddrnet23s_cityscapes]" time="0.000"><skipped type="pytest.skip" message="dependent on CCM repo">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/ddrnet/test_ddrnet.py:94: dependent on CCM repo</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.deit.test_deit" name="test_deit_imgcls_hf_pytorch[facebook/deit-tiny-patch16-224]" time="0.101"><properties><property name="start_timestamp" value="2025-03-31T00:31:05" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:31:05" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/deit/test_deit.py:48: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.detr.test_detr" name="test_detr_segmentation[facebook/detr-resnet-50-panoptic]" time="0.101"><properties><property name="start_timestamp" value="2025-03-31T00:31:05" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:31:05" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/detr/test_detr.py:62: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.dla.test_dla" name="test_dla_pytorch[dla34]" time="130.086"><properties><property name="start_timestamp" value="2025-03-31T00:31:05" /><property name="owner" value="tt-forge-fe" /><property name="group" value="generality" /><property name="tags" value="{'model_name': 'pt_dla_dla34_visual_bb_torchvision', 'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:33:16" /></properties><failure message="urllib.error.URLError: &lt;urlopen error [Errno 110] Connection timed out&gt;">self = &lt;urllib.request.HTTPHandler object at 0x7f95813aec20&gt;
http_class = &lt;class 'http.client.HTTPConnection'&gt;
req = &lt;urllib.request.Request object at 0x7f94e5d4d210&gt;, http_conn_args = {}
host = 'dl.yf.io', h = &lt;http.client.HTTPConnection object at 0x7f95813ade40&gt;

    def do_open(self, http_class, req, **http_conn_args):
        """Return an HTTPResponse object for the request, using http_class.

        http_class must implement the HTTPConnection API from http.client.
        """
        host = req.host
        if not host:
            raise URLError('no host given')

        # will parse host:port
        h = http_class(host, timeout=req.timeout, **http_conn_args)
        h.set_debuglevel(self._debuglevel)

        headers = dict(req.unredirected_hdrs)
        headers.update({k: v for k, v in req.headers.items()
                        if k not in headers})

        # TODO(jhylton): Should this be redesigned to handle
        # persistent connections?

        # We want to make an HTTP/1.1 request, but the addinfourl
        # class isn't prepared to deal with a persistent connection.
        # It will try to read all remaining data from the socket,
        # which will block while the server waits for the next request.
        # So make sure the connection gets closed after the (only)
        # request.
        headers["Connection"] = "close"
        headers = {name.title(): val for name, val in headers.items()}

        if req._tunnel_host:
            tunnel_headers = {}
            proxy_auth_hdr = "Proxy-Authorization"
            if proxy_auth_hdr in headers:
                tunnel_headers[proxy_auth_hdr] = headers[proxy_auth_hdr]
                # Proxy-Authorization should not be sent to origin
                # server.
                del headers[proxy_auth_hdr]
            h.set_tunnel(req._tunnel_host, headers=tunnel_headers)

        try:
            try:
&gt;               h.request(req.get_method(), req.selector, req.data, headers,
                          encode_chunked=req.has_header('Transfer-encoding'))

/usr/lib/python3.10/urllib/request.py:1348:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;http.client.HTTPConnection object at 0x7f95813ade40&gt;, method = 'GET'
url = '/dla/models/imagenet/dla34-ba72cf86.pth', body = None
headers = {'Connection': 'close', 'Host': 'dl.yf.io', 'User-Agent': 'torch.hub'}

    def request(self, method, url, body=None, headers={}, *,
                encode_chunked=False):
        """Send a complete request to the server."""
&gt;       self._send_request(method, url, body, headers, encode_chunked)

/usr/lib/python3.10/http/client.py:1283:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;http.client.HTTPConnection object at 0x7f95813ade40&gt;, method = 'GET'
url = '/dla/models/imagenet/dla34-ba72cf86.pth', body = None
headers = {'Connection': 'close', 'Host': 'dl.yf.io', 'User-Agent': 'torch.hub'}
encode_chunked = False

    def _send_request(self, method, url, body, headers, encode_chunked):
        # Honor explicitly requested Host: and Accept-Encoding: headers.
        header_names = frozenset(k.lower() for k in headers)
        skips = {}
        if 'host' in header_names:
            skips['skip_host'] = 1
        if 'accept-encoding' in header_names:
            skips['skip_accept_encoding'] = 1

        self.putrequest(method, url, **skips)

        # chunked encoding will happen if HTTP/1.1 is used and either
        # the caller passes encode_chunked=True or the following
        # conditions hold:
        # 1. content-length has not been explicitly set
        # 2. the body is a file or iterable, but not a str or bytes-like
        # 3. Transfer-Encoding has NOT been explicitly set by the caller

        if 'content-length' not in header_names:
            # only chunk body if not explicitly set for backwards
            # compatibility, assuming the client code is already handling the
            # chunking
            if 'transfer-encoding' not in header_names:
                # if content-length cannot be automatically determined, fall
                # back to chunked encoding
                encode_chunked = False
                content_length = self._get_content_length(body, method)
                if content_length is None:
                    if body is not None:
                        if self.debuglevel &gt; 0:
                            print('Unable to determine size of %r' % body)
                        encode_chunked = True
                        self.putheader('Transfer-Encoding', 'chunked')
                else:
                    self.putheader('Content-Length', str(content_length))
        else:
            encode_chunked = False

        for hdr, value in headers.items():
            self.putheader(hdr, value)
        if isinstance(body, str):
            # RFC 2616 Section 3.7.1 says that text default has a
            # default charset of iso-8859-1.
            body = _encode(body, 'body')
&gt;       self.endheaders(body, encode_chunked=encode_chunked)

/usr/lib/python3.10/http/client.py:1329:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;http.client.HTTPConnection object at 0x7f95813ade40&gt;
message_body = None

    def endheaders(self, message_body=None, *, encode_chunked=False):
        """Indicate that the last header line has been sent to the server.

        This method sends the request to the server.  The optional message_body
        argument can be used to pass a message body associated with the
        request.
        """
        if self.__state == _CS_REQ_STARTED:
            self.__state = _CS_REQ_SENT
        else:
            raise CannotSendHeader()
&gt;       self._send_output(message_body, encode_chunked=encode_chunked)

/usr/lib/python3.10/http/client.py:1278:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;http.client.HTTPConnection object at 0x7f95813ade40&gt;
message_body = None, encode_chunked = False

    def _send_output(self, message_body=None, encode_chunked=False):
        """Send the currently buffered request and clear the buffer.

        Appends an extra \\r\\n to the buffer.
        A message_body may be specified, to be appended to the request.
        """
        self._buffer.extend((b"", b""))
        msg = b"\r\n".join(self._buffer)
        del self._buffer[:]
&gt;       self.send(msg)

/usr/lib/python3.10/http/client.py:1038:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;http.client.HTTPConnection object at 0x7f95813ade40&gt;
data = b'GET /dla/models/imagenet/dla34-ba72cf86.pth HTTP/1.1\r\nAccept-Encoding: identity\r\nHost: dl.yf.io\r\nUser-Agent: torch.hub\r\nConnection: close\r\n\r\n'

    def send(self, data):
        """Send `data' to the server.
        ``data`` can be a string object, a bytes object, an array object, a
        file-like object that supports a .read() method, or an iterable object.
        """

        if self.sock is None:
            if self.auto_open:
&gt;               self.connect()

/usr/lib/python3.10/http/client.py:976:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;http.client.HTTPConnection object at 0x7f95813ade40&gt;

    def connect(self):
        """Connect to the host and port specified in __init__."""
        sys.audit("http.client.connect", self, self.host, self.port)
&gt;       self.sock = self._create_connection(
            (self.host,self.port), self.timeout, self.source_address)

/usr/lib/python3.10/http/client.py:942:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

address = ('dl.yf.io', 80), timeout = &lt;object object at 0x7f95f44b0ec0&gt;
source_address = None

    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,
                          source_address=None):
        """Connect to *address* and return the socket object.

        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        A host of '' or port 0 tells the OS to use the default.
        """

        host, port = address
        err = None
        for res in getaddrinfo(host, port, 0, SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket(af, socktype, proto)
                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
                sock.connect(sa)
                # Break explicitly a reference cycle
                err = None
                return sock

            except error as _:
                err = _
                if sock is not None:
                    sock.close()

        if err is not None:
            try:
&gt;               raise err

/usr/lib/python3.10/socket.py:845:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

address = ('dl.yf.io', 80), timeout = &lt;object object at 0x7f95f44b0ec0&gt;
source_address = None

    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,
                          source_address=None):
        """Connect to *address* and return the socket object.

        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        A host of '' or port 0 tells the OS to use the default.
        """

        host, port = address
        err = None
        for res in getaddrinfo(host, port, 0, SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket(af, socktype, proto)
                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
&gt;               sock.connect(sa)
E               TimeoutError: [Errno 110] Connection timed out

/usr/lib/python3.10/socket.py:833: TimeoutError

During handling of the above exception, another exception occurred:

forge_property_recorder = &lt;forge.forge_property_utils.ForgePropertyHandler object at 0x7f94e5c288b0&gt;
variant = 'dla34'

    @pytest.mark.nightly
    @pytest.mark.parametrize("variant", variants)
    def test_dla_pytorch(forge_property_recorder, variant):
        if variant != "dla34":
            pytest.skip("Skipping due to the current CI/CD pipeline limitations")

        # Build Module Name
        module_name = build_module_name(
            framework=Framework.PYTORCH, model="dla", variant=variant, task=Task.VISUAL_BACKBONE, source=Source.TORCHVISION
        )

        # Record Forge Property
        forge_property_recorder.record_group("generality")
        forge_property_recorder.record_model_name(module_name)

        # Load the model and prepare input data
&gt;       framework_model, inputs = load_dla_model(variant)

forge/test/models/pytorch/vision/dla/test_dla.py:43:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
forge/test/models/pytorch/vision/dla/utils/utils.py:34: in load_dla_model
    framework_model = func(pretrained="imagenet")
forge/test/models/pytorch/vision/dla/utils/dla_model.py:473: in dla34
    model.load_pretrained_model(pretrained, "dla34")
forge/test/models/pytorch/vision/dla/utils/dla_model.py:466: in load_pretrained_model
    self.load_state_dict(model_zoo.load_url(model_url))
/opt/ttforge-toolchain/venv/lib/python3.10/site-packages/torch/hub.py:766: in load_state_dict_from_url
    download_url_to_file(url, cached_file, hash_prefix, progress=progress)
/opt/ttforge-toolchain/venv/lib/python3.10/site-packages/torch/hub.py:620: in download_url_to_file
    u = urlopen(req)
/usr/lib/python3.10/urllib/request.py:216: in urlopen
    return opener.open(url, data, timeout)
/usr/lib/python3.10/urllib/request.py:519: in open
    response = self._open(req, data)
/usr/lib/python3.10/urllib/request.py:536: in _open
    result = self._call_chain(self.handle_open, protocol, protocol +
/usr/lib/python3.10/urllib/request.py:496: in _call_chain
    result = func(*args)
/usr/lib/python3.10/urllib/request.py:1377: in http_open
    return self.do_open(http.client.HTTPConnection, req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib.request.HTTPHandler object at 0x7f95813aec20&gt;
http_class = &lt;class 'http.client.HTTPConnection'&gt;
req = &lt;urllib.request.Request object at 0x7f94e5d4d210&gt;, http_conn_args = {}
host = 'dl.yf.io', h = &lt;http.client.HTTPConnection object at 0x7f95813ade40&gt;

    def do_open(self, http_class, req, **http_conn_args):
        """Return an HTTPResponse object for the request, using http_class.

        http_class must implement the HTTPConnection API from http.client.
        """
        host = req.host
        if not host:
            raise URLError('no host given')

        # will parse host:port
        h = http_class(host, timeout=req.timeout, **http_conn_args)
        h.set_debuglevel(self._debuglevel)

        headers = dict(req.unredirected_hdrs)
        headers.update({k: v for k, v in req.headers.items()
                        if k not in headers})

        # TODO(jhylton): Should this be redesigned to handle
        # persistent connections?

        # We want to make an HTTP/1.1 request, but the addinfourl
        # class isn't prepared to deal with a persistent connection.
        # It will try to read all remaining data from the socket,
        # which will block while the server waits for the next request.
        # So make sure the connection gets closed after the (only)
        # request.
        headers["Connection"] = "close"
        headers = {name.title(): val for name, val in headers.items()}

        if req._tunnel_host:
            tunnel_headers = {}
            proxy_auth_hdr = "Proxy-Authorization"
            if proxy_auth_hdr in headers:
                tunnel_headers[proxy_auth_hdr] = headers[proxy_auth_hdr]
                # Proxy-Authorization should not be sent to origin
                # server.
                del headers[proxy_auth_hdr]
            h.set_tunnel(req._tunnel_host, headers=tunnel_headers)

        try:
            try:
                h.request(req.get_method(), req.selector, req.data, headers,
                          encode_chunked=req.has_header('Transfer-encoding'))
            except OSError as err: # timeout error
&gt;               raise URLError(err)
E               urllib.error.URLError: &lt;urlopen error [Errno 110] Connection timed out&gt;

/usr/lib/python3.10/urllib/request.py:1351: URLError</failure></testcase><testcase classname="forge.test.models.pytorch.vision.dla.test_dla" name="test_dla_pytorch[dla60x]" time="0.102"><properties><property name="start_timestamp" value="2025-03-31T00:33:16" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:33:16" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/dla/test_dla.py:31: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.dla.test_dla" name="test_dla_pytorch[dla102]" time="0.101"><properties><property name="start_timestamp" value="2025-03-31T00:33:16" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:33:16" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/dla/test_dla.py:31: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.efficientnet.test_efficientnet" name="test_efficientnet_torchvision[efficientnet_b4]" time="0.101"><properties><property name="start_timestamp" value="2025-03-31T00:33:16" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:33:16" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/efficientnet/test_efficientnet.py:126: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.efficientnet.test_efficientnet_lite" name="test_efficientnet_lite_0_pytorch" time="0.000"><skipped type="pytest.skip" message="dependent on CCM repo">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/efficientnet/test_efficientnet_lite.py:17: dependent on CCM repo</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.efficientnet.test_efficientnet_lite" name="test_efficientnet_lite_4_pytorch" time="0.000"><skipped type="pytest.skip" message="dependent on CCM repo">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/efficientnet/test_efficientnet_lite.py:157: dependent on CCM repo</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.ghostnet.test_ghostnet" name="test_ghostnet_timm[ghostnet_100]" time="178.216"><properties><property name="start_timestamp" value="2025-03-31T00:33:16" /><property name="owner" value="tt-forge-fe" /><property name="group" value="generality" /><property name="tags" value="{'model_name': 'pt_ghostnet_ghostnet_100_img_cls_timm', 'bringup_status': 'PASSED', 'pcc': 0.9947885396764086, 'atol': 0.433474063873291, 'execution_stage': 'PASSED'}" /><property name="config" value="{'compiler': {'enable_training': False, 'enable_recompute': False, 'match_subgraph_patterns': None, 'enable_consteval': True, 'compile_subgraphs': False, 'enable_link_past_cache_ios': False, 'enable_pt2_fx_graph_link': False, 'compile_depth': 'FULL', 'enable_tvm_cpu_fallback': False, 'cpu_fallback_ops': ['embedding'], 'enable_tm_cpu_fallback': False, 'tm_cpu_fallback_max_depth': 10, 'enable_tvm_dropout': False, 'enable_tvm_unsupported_ops': False, 'enable_tvm_constant_prop': False, 'convert_framework_params_to_tvm': False, 'enable_xla_jax_convert': False, 'enable_tvm_jax_freeze_large_model': True, 'framework_model_output_names': [], 'tvm_constnat_prop_mask': [], 'compile_tvm_to_python': True, 'retain_tvm_python_files': False, 'tvm_graph_store_path': '', 'tvm_graph_load_path': '', 'tvm_module_to_num_patterns': {}, 'extract_tvm_unique_ops_config': False, 'tvm_generate_unique_ops_tests': False, 'export_tvm_unique_ops_config_details': False, 'loopback_outputs': {}, 'default_df_override': None, 'default_accumulate_df': None, 'enable_broadcast_splitting': False, 'default_math_fidelity': 'HiFi3', 'amp_level': None, 'fracture_groups': [], 'amp_properties': []}, 'verify': {'enabled': True, 'verify_size': True, 'verify_dtype': True, 'verify_shape': True, 'verify_values': True, 'value_checker': {'rtol': 1e-05, 'atol': 1e-08, 'pcc': 0.99, 'dissimilarity_threshold': 0.001}, 'dump_tensors': False, 'dump_tensors_path': ''}}" /><property name="end_timestamp" value="2025-03-31T00:36:14" /></properties></testcase><testcase classname="forge.test.models.pytorch.vision.hardnet.test_hardnet" name="test_hardnet_pytorch[hardnet68]" time="0.000"><skipped type="pytest.skip" message="dependent on CCM repo">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/hardnet/test_hardnet.py:24: dependent on CCM repo</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.hrnet.test_hrnet" name="test_hrnet_osmr_pytorch[hrnet_w18_small_v2]" time="0.102"><properties><property name="start_timestamp" value="2025-03-31T00:36:15" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:36:15" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/hrnet/test_hrnet.py:82: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.hrnet.test_hrnet" name="test_hrnet_osmr_pytorch[hrnetv2_w40]" time="0.101"><properties><property name="start_timestamp" value="2025-03-31T00:36:15" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:36:15" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/hrnet/test_hrnet.py:82: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.hrnet.test_hrnet" name="test_hrnet_timm_pytorch[hrnet_w30]" time="0.101"><properties><property name="start_timestamp" value="2025-03-31T00:36:15" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:36:15" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/hrnet/test_hrnet.py:162: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.hrnet.test_hrnet" name="test_hrnet_timm_pytorch[hrnet_w48]" time="0.102"><properties><property name="start_timestamp" value="2025-03-31T00:36:15" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:36:15" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/hrnet/test_hrnet.py:162: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.hrnet.test_hrnet" name="test_hrnet_timm_pytorch[hrnet_w18.ms_aug_in1k]" time="421.560"><properties><property name="start_timestamp" value="2025-03-31T00:36:15" /><property name="owner" value="tt-forge-fe" /><property name="group" value="generality" /><property name="tags" value="{'model_name': 'pt_hrnet_hrnet_w18_ms_aug_in1k_pose_estimation_timm', 'bringup_status': 'PASSED', 'pcc': 0.999271121562722, 'atol': 0.1811811923980713, 'execution_stage': 'PASSED'}" /><property name="config" value="{'compiler': {'enable_training': False, 'enable_recompute': False, 'match_subgraph_patterns': None, 'enable_consteval': True, 'compile_subgraphs': False, 'enable_link_past_cache_ios': False, 'enable_pt2_fx_graph_link': False, 'compile_depth': 'FULL', 'enable_tvm_cpu_fallback': False, 'cpu_fallback_ops': ['embedding'], 'enable_tm_cpu_fallback': False, 'tm_cpu_fallback_max_depth': 10, 'enable_tvm_dropout': False, 'enable_tvm_unsupported_ops': False, 'enable_tvm_constant_prop': False, 'convert_framework_params_to_tvm': False, 'enable_xla_jax_convert': False, 'enable_tvm_jax_freeze_large_model': True, 'framework_model_output_names': [], 'tvm_constnat_prop_mask': [], 'compile_tvm_to_python': True, 'retain_tvm_python_files': False, 'tvm_graph_store_path': '', 'tvm_graph_load_path': '', 'tvm_module_to_num_patterns': {}, 'extract_tvm_unique_ops_config': False, 'tvm_generate_unique_ops_tests': False, 'export_tvm_unique_ops_config_details': False, 'loopback_outputs': {}, 'default_df_override': None, 'default_accumulate_df': None, 'enable_broadcast_splitting': False, 'default_math_fidelity': 'HiFi3', 'amp_level': None, 'fracture_groups': [], 'amp_properties': []}, 'verify': {'enabled': True, 'verify_size': True, 'verify_dtype': True, 'verify_shape': True, 'verify_values': True, 'value_checker': {'rtol': 1e-05, 'atol': 1e-08, 'pcc': 0.99, 'dissimilarity_threshold': 0.001}, 'dump_tensors': False, 'dump_tensors_path': ''}}" /><property name="end_timestamp" value="2025-03-31T00:43:16" /></properties></testcase><testcase classname="forge.test.models.pytorch.vision.mlp_mixer.test_mlp_mixer" name="test_mlp_mixer_timm_pytorch[mixer_b16_224_in21k]" time="0.102"><properties><property name="start_timestamp" value="2025-03-31T00:43:17" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:43:17" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/mlp_mixer/test_mlp_mixer.py:53: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.mlp_mixer.test_mlp_mixer" name="test_mlp_mixer_timm_pytorch[mixer_l16_224]" time="0.101"><properties><property name="start_timestamp" value="2025-03-31T00:43:17" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:43:17" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/mlp_mixer/test_mlp_mixer.py:53: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.mlp_mixer.test_mlp_mixer" name="test_mlp_mixer_timm_pytorch[mixer_s32_224]" time="0.101"><properties><property name="start_timestamp" value="2025-03-31T00:43:17" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:43:17" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/mlp_mixer/test_mlp_mixer.py:53: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.mobilenet.test_mobilenet_v1" name="test_mobilenetv1_basic" time="38.403"><properties><property name="start_timestamp" value="2025-03-31T00:43:17" /><property name="owner" value="tt-forge-fe" /><property name="group" value="generality" /><property name="tags" value="{'model_name': 'pt_mobilenet_v1_basic_img_cls_torchvision', 'bringup_status': 'PASSED', 'pcc': 1.0, 'atol': 0.0, 'execution_stage': 'PASSED'}" /><property name="config" value="{'compiler': {'enable_training': False, 'enable_recompute': False, 'match_subgraph_patterns': None, 'enable_consteval': True, 'compile_subgraphs': False, 'enable_link_past_cache_ios': False, 'enable_pt2_fx_graph_link': False, 'compile_depth': 'FULL', 'enable_tvm_cpu_fallback': False, 'cpu_fallback_ops': ['embedding'], 'enable_tm_cpu_fallback': False, 'tm_cpu_fallback_max_depth': 10, 'enable_tvm_dropout': False, 'enable_tvm_unsupported_ops': False, 'enable_tvm_constant_prop': False, 'convert_framework_params_to_tvm': False, 'enable_xla_jax_convert': False, 'enable_tvm_jax_freeze_large_model': True, 'framework_model_output_names': [], 'tvm_constnat_prop_mask': [], 'compile_tvm_to_python': True, 'retain_tvm_python_files': False, 'tvm_graph_store_path': '', 'tvm_graph_load_path': '', 'tvm_module_to_num_patterns': {}, 'extract_tvm_unique_ops_config': False, 'tvm_generate_unique_ops_tests': False, 'export_tvm_unique_ops_config_details': False, 'loopback_outputs': {}, 'default_df_override': None, 'default_accumulate_df': None, 'enable_broadcast_splitting': False, 'default_math_fidelity': 'HiFi3', 'amp_level': None, 'fracture_groups': [], 'amp_properties': []}, 'verify': {'enabled': True, 'verify_size': True, 'verify_dtype': True, 'verify_shape': True, 'verify_values': True, 'value_checker': {'rtol': 1e-05, 'atol': 1e-08, 'pcc': 0.99, 'dissimilarity_threshold': 0.001}, 'dump_tensors': False, 'dump_tensors_path': ''}}" /><property name="end_timestamp" value="2025-03-31T00:43:55" /></properties></testcase><testcase classname="forge.test.models.pytorch.vision.mobilenet.test_mobilenet_v2" name="test_mobilenetv2_basic" time="74.049"><properties><property name="start_timestamp" value="2025-03-31T00:43:55" /><property name="owner" value="tt-forge-fe" /><property name="group" value="red" /><property name="tags" value="{'model_name': 'pt_mobilenetv2_basic_img_cls_torchhub', 'bringup_status': 'PASSED', 'pcc': 0.996606612541334, 'atol': 0.7474956512451172, 'execution_stage': 'PASSED'}" /><property name="config" value="{'compiler': {'enable_training': False, 'enable_recompute': False, 'match_subgraph_patterns': None, 'enable_consteval': True, 'compile_subgraphs': False, 'enable_link_past_cache_ios': False, 'enable_pt2_fx_graph_link': False, 'compile_depth': 'FULL', 'enable_tvm_cpu_fallback': False, 'cpu_fallback_ops': ['embedding'], 'enable_tm_cpu_fallback': False, 'tm_cpu_fallback_max_depth': 10, 'enable_tvm_dropout': False, 'enable_tvm_unsupported_ops': False, 'enable_tvm_constant_prop': False, 'convert_framework_params_to_tvm': False, 'enable_xla_jax_convert': False, 'enable_tvm_jax_freeze_large_model': True, 'framework_model_output_names': [], 'tvm_constnat_prop_mask': [], 'compile_tvm_to_python': True, 'retain_tvm_python_files': False, 'tvm_graph_store_path': '', 'tvm_graph_load_path': '', 'tvm_module_to_num_patterns': {}, 'extract_tvm_unique_ops_config': False, 'tvm_generate_unique_ops_tests': False, 'export_tvm_unique_ops_config_details': False, 'loopback_outputs': {}, 'default_df_override': None, 'default_accumulate_df': None, 'enable_broadcast_splitting': False, 'default_math_fidelity': 'HiFi3', 'amp_level': None, 'fracture_groups': [], 'amp_properties': []}, 'verify': {'enabled': True, 'verify_size': True, 'verify_dtype': True, 'verify_shape': True, 'verify_values': True, 'value_checker': {'rtol': 1e-05, 'atol': 1e-08, 'pcc': 0.99, 'dissimilarity_threshold': 0.001}, 'dump_tensors': False, 'dump_tensors_path': ''}}" /><property name="end_timestamp" value="2025-03-31T00:45:09" /></properties></testcase><testcase classname="forge.test.models.pytorch.vision.mobilenet.test_mobilenet_v3" name="test_mobilenetv3_basic[mobilenet_v3_small]" time="0.102"><properties><property name="start_timestamp" value="2025-03-31T00:45:09" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:45:09" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/mobilenet/test_mobilenet_v3.py:34: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.mobilenet.test_mobilenet_v3_ssd" name="test_mobilenetv3_ssd[resnet34]" time="43.136"><properties><property name="start_timestamp" value="2025-03-31T00:45:09" /><property name="owner" value="tt-forge-fe" /><property name="group" value="generality" /><property name="tags" value="{'model_name': 'pt_mobilenetv3_ssd_resnet34_img_cls_torchvision', 'bringup_status': 'PASSED', 'pcc': 0.9952978082795625, 'atol': 0.5903570652008057, 'execution_stage': 'PASSED'}" /><property name="config" value="{'compiler': {'enable_training': False, 'enable_recompute': False, 'match_subgraph_patterns': None, 'enable_consteval': True, 'compile_subgraphs': False, 'enable_link_past_cache_ios': False, 'enable_pt2_fx_graph_link': False, 'compile_depth': 'FULL', 'enable_tvm_cpu_fallback': False, 'cpu_fallback_ops': ['embedding'], 'enable_tm_cpu_fallback': False, 'tm_cpu_fallback_max_depth': 10, 'enable_tvm_dropout': False, 'enable_tvm_unsupported_ops': False, 'enable_tvm_constant_prop': False, 'convert_framework_params_to_tvm': False, 'enable_xla_jax_convert': False, 'enable_tvm_jax_freeze_large_model': True, 'framework_model_output_names': [], 'tvm_constnat_prop_mask': [], 'compile_tvm_to_python': True, 'retain_tvm_python_files': False, 'tvm_graph_store_path': '', 'tvm_graph_load_path': '', 'tvm_module_to_num_patterns': {}, 'extract_tvm_unique_ops_config': False, 'tvm_generate_unique_ops_tests': False, 'export_tvm_unique_ops_config_details': False, 'loopback_outputs': {}, 'default_df_override': None, 'default_accumulate_df': None, 'enable_broadcast_splitting': False, 'default_math_fidelity': 'HiFi3', 'amp_level': None, 'fracture_groups': [], 'amp_properties': []}, 'verify': {'enabled': True, 'verify_size': True, 'verify_dtype': True, 'verify_shape': True, 'verify_values': True, 'value_checker': {'rtol': 1e-05, 'atol': 1e-08, 'pcc': 0.99, 'dissimilarity_threshold': 0.001}, 'dump_tensors': False, 'dump_tensors_path': ''}}" /><property name="end_timestamp" value="2025-03-31T00:45:52" /></properties></testcase><testcase classname="forge.test.models.pytorch.vision.openpose.test_openpose" name="test_openpose_osmr[lwopenpose2d_mobilenet_cmupan_coco]" time="0.000"><skipped type="pytest.skip" message="dependent on CCM repo">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/openpose/test_openpose.py:97: dependent on CCM repo</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.perceiverio.test_perceiverio" name="test_perceiverio_for_image_classification_pytorch[deepmind/vision-perceiver-fourier]" time="0.102"><properties><property name="start_timestamp" value="2025-03-31T00:45:53" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:45:53" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/perceiverio/test_perceiverio.py:52: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.pidnet.test_pidnet" name="test_pidnet_pytorch[pidnet_s]" time="0.000"><skipped type="pytest.skip" message="dependent on CCM repo">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/pidnet/test_pidnet.py:20: dependent on CCM repo</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.regnet.test_regnet" name="test_regnet[facebook/regnet-y-040]" time="115.189"><properties><property name="start_timestamp" value="2025-03-31T00:45:53" /><property name="owner" value="tt-forge-fe" /><property name="group" value="generality" /><property name="tags" value="{'model_name': 'pt_regnet_facebook_regnet_y_040_img_cls_hf', 'bringup_status': 'PASSED', 'pcc': 0.9970280036023045, 'atol': 0.7987642288208008, 'execution_stage': 'PASSED'}" /><property name="config" value="{'compiler': {'enable_training': False, 'enable_recompute': False, 'match_subgraph_patterns': None, 'enable_consteval': True, 'compile_subgraphs': False, 'enable_link_past_cache_ios': False, 'enable_pt2_fx_graph_link': False, 'compile_depth': 'FULL', 'enable_tvm_cpu_fallback': False, 'cpu_fallback_ops': ['embedding'], 'enable_tm_cpu_fallback': False, 'tm_cpu_fallback_max_depth': 10, 'enable_tvm_dropout': False, 'enable_tvm_unsupported_ops': False, 'enable_tvm_constant_prop': False, 'convert_framework_params_to_tvm': False, 'enable_xla_jax_convert': False, 'enable_tvm_jax_freeze_large_model': True, 'framework_model_output_names': [], 'tvm_constnat_prop_mask': [], 'compile_tvm_to_python': True, 'retain_tvm_python_files': False, 'tvm_graph_store_path': '', 'tvm_graph_load_path': '', 'tvm_module_to_num_patterns': {}, 'extract_tvm_unique_ops_config': False, 'tvm_generate_unique_ops_tests': False, 'export_tvm_unique_ops_config_details': False, 'loopback_outputs': {}, 'default_df_override': None, 'default_accumulate_df': None, 'enable_broadcast_splitting': False, 'default_math_fidelity': 'HiFi3', 'amp_level': None, 'fracture_groups': [], 'amp_properties': []}, 'verify': {'enabled': True, 'verify_size': True, 'verify_dtype': True, 'verify_shape': True, 'verify_values': True, 'value_checker': {'rtol': 1e-05, 'atol': 1e-08, 'pcc': 0.99, 'dissimilarity_threshold': 0.001}, 'dump_tensors': False, 'dump_tensors_path': ''}}" /><property name="end_timestamp" value="2025-03-31T00:47:48" /></properties></testcase><testcase classname="forge.test.models.pytorch.vision.regnet.test_regnet" name="test_regnet_torchvision[regnet_y_32gf]" time="0.102"><properties><property name="start_timestamp" value="2025-03-31T00:47:48" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:47:48" /></properties><skipped type="pytest.skip" message="Skipping this variant; only testing the small variant(regnet_y_400mf) for now.">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/regnet/test_regnet.py:128: Skipping this variant; only testing the small variant(regnet_y_400mf) for now.</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.regnet.test_regnet" name="test_regnet_torchvision[regnet_x_8gf]" time="0.102"><properties><property name="start_timestamp" value="2025-03-31T00:47:48" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:47:48" /></properties><skipped type="pytest.skip" message="Skipping this variant; only testing the small variant(regnet_y_400mf) for now.">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/regnet/test_regnet.py:128: Skipping this variant; only testing the small variant(regnet_y_400mf) for now.</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.regnet.test_regnet" name="test_regnet_torchvision[regnet_x_32gf]" time="0.102"><properties><property name="start_timestamp" value="2025-03-31T00:47:48" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:47:48" /></properties><skipped type="pytest.skip" message="Skipping this variant; only testing the small variant(regnet_y_400mf) for now.">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/regnet/test_regnet.py:128: Skipping this variant; only testing the small variant(regnet_y_400mf) for now.</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.resnet.test_resnet" name="test_resnet_hf[microsoft/resnet-50]" time="68.718"><properties><property name="start_timestamp" value="2025-03-31T00:47:48" /><property name="owner" value="tt-forge-fe" /><property name="group" value="generality" /><property name="tags" value="{'model_name': 'pt_resnet_50_img_cls_hf', 'bringup_status': 'PASSED', 'pcc': 0.9728827346496841, 'atol': 1.7062859535217285, 'execution_stage': 'PASSED'}" /><property name="config" value="{'compiler': {'enable_training': False, 'enable_recompute': False, 'match_subgraph_patterns': None, 'enable_consteval': True, 'compile_subgraphs': False, 'enable_link_past_cache_ios': False, 'enable_pt2_fx_graph_link': False, 'compile_depth': 'FULL', 'enable_tvm_cpu_fallback': False, 'cpu_fallback_ops': ['embedding'], 'enable_tm_cpu_fallback': False, 'tm_cpu_fallback_max_depth': 10, 'enable_tvm_dropout': False, 'enable_tvm_unsupported_ops': False, 'enable_tvm_constant_prop': False, 'convert_framework_params_to_tvm': False, 'enable_xla_jax_convert': False, 'enable_tvm_jax_freeze_large_model': True, 'framework_model_output_names': [], 'tvm_constnat_prop_mask': [], 'compile_tvm_to_python': True, 'retain_tvm_python_files': False, 'tvm_graph_store_path': '', 'tvm_graph_load_path': '', 'tvm_module_to_num_patterns': {}, 'extract_tvm_unique_ops_config': False, 'tvm_generate_unique_ops_tests': False, 'export_tvm_unique_ops_config_details': False, 'loopback_outputs': {}, 'default_df_override': None, 'default_accumulate_df': None, 'enable_broadcast_splitting': False, 'default_math_fidelity': 'HiFi3', 'amp_level': None, 'fracture_groups': [], 'amp_properties': []}, 'verify': {'enabled': True, 'verify_size': True, 'verify_dtype': True, 'verify_shape': True, 'verify_values': True, 'value_checker': {'rtol': 1e-05, 'atol': 1e-08, 'pcc': 0.95, 'dissimilarity_threshold': 0.001}, 'dump_tensors': False, 'dump_tensors_path': ''}}" /><property name="end_timestamp" value="2025-03-31T00:48:57" /></properties></testcase><testcase classname="forge.test.models.pytorch.vision.resnext.test_resnext" name="test_resnext_101_32x8d_fb_wsl_pytorch[resnext101_32x8d_wsl]" time="0.102"><properties><property name="start_timestamp" value="2025-03-31T00:48:57" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:48:57" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/resnext/test_resnext.py:94: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.resnext.test_resnext" name="test_resnext_26_osmr_pytorch[resnext26_32x4d]" time="0.102"><properties><property name="start_timestamp" value="2025-03-31T00:48:57" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:48:57" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/resnext/test_resnext.py:162: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.retinanet.test_retinanet" name="test_retinanet[retinanet_rn152fpn]" time="0.101"><properties><property name="start_timestamp" value="2025-03-31T00:48:57" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:48:57" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/retinanet/test_retinanet.py:31: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.segformer.test_segformer" name="test_segformer_image_classification_pytorch[nvidia/mit-b1]" time="0.102"><properties><property name="start_timestamp" value="2025-03-31T00:48:57" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:48:57" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/segformer/test_segformer.py:39: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.segformer.test_segformer" name="test_segformer_image_classification_pytorch[nvidia/mit-b5]" time="0.101"><properties><property name="start_timestamp" value="2025-03-31T00:48:57" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:48:57" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/segformer/test_segformer.py:39: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.segformer.test_segformer" name="test_segformer_semantic_segmentation_pytorch[nvidia/segformer-b2-finetuned-ade-512-512]" time="0.101"><properties><property name="start_timestamp" value="2025-03-31T00:48:57" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:48:57" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/segformer/test_segformer.py:92: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.swin.test_swin" name="test_swin_v2_tiny_masked[microsoft/swinv2-tiny-patch4-window8-256]" time="0.101"><properties><property name="start_timestamp" value="2025-03-31T00:48:57" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:48:57" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/swin/test_swin.py:142: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.swin.test_swin" name="test_swin_torchvision[swin_s]" time="0.101"><properties><property name="start_timestamp" value="2025-03-31T00:48:58" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:48:58" /></properties><skipped type="pytest.skip" message="Skipping this variant; only testing the small variants(swin_t,swin_v2_t) for now.">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/swin/test_swin.py:210: Skipping this variant; only testing the small variants(swin_t,swin_v2_t) for now.</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.tri.test_tri_basic_2" name="test_tri_basic_2_sematic_segmentation_pytorch" time="0.000"><skipped type="pytest.skip" message="dependent on CCM repo and Hang observed at post_initial_graph_pass">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/tri/test_tri_basic_2.py:21: dependent on CCM repo and Hang observed at post_initial_graph_pass</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.vgg.test_vgg" name="test_vgg_osmr_pytorch[vgg19]" time="0.101"><properties><property name="start_timestamp" value="2025-03-31T00:48:58" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:48:58" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/vgg/test_vgg.py:38: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.vgg.test_vgg" name="test_vgg_osmr_pytorch[bn_vgg19b]" time="0.102"><properties><property name="start_timestamp" value="2025-03-31T00:48:58" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:48:58" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/vgg/test_vgg.py:38: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.vgg.test_vgg" name="test_vgg_19_hf_pytorch" time="0.101"><properties><property name="start_timestamp" value="2025-03-31T00:48:58" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:48:58" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/vgg/test_vgg.py:85: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.vgg.test_vgg" name="test_vgg_torchvision[vgg16]" time="0.101"><properties><property name="start_timestamp" value="2025-03-31T00:48:58" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:48:58" /></properties><skipped type="pytest.skip" message="Skipping this variant; only testing the small variant(vgg11) for now.">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/vgg/test_vgg.py:270: Skipping this variant; only testing the small variant(vgg11) for now.</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.vit.test_vit" name="test_vit_torchvision[vit_l_16]" time="0.102"><properties><property name="start_timestamp" value="2025-03-31T00:48:58" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:48:58" /></properties><skipped type="pytest.skip" message="Skipping this variant; only testing the small variant(vit_b_16) for now.">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/vit/test_vit.py:91: Skipping this variant; only testing the small variant(vit_b_16) for now.</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.vovnet.test_vovnet" name="test_vovnet_osmr_pytorch[vovnet57]" time="0.102"><properties><property name="start_timestamp" value="2025-03-31T00:48:58" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:48:58" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/vovnet/test_vovnet.py:39: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.vovnet.test_vovnet" name="test_vovnet_v1_39_stigma_pytorch" time="0.101"><properties><property name="start_timestamp" value="2025-03-31T00:48:58" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:48:58" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/vovnet/test_vovnet.py:72: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.wideresnet.test_wideresnet" name="test_wideresnet_pytorch[wide_resnet50_2]" time="45.987"><properties><property name="start_timestamp" value="2025-03-31T00:48:58" /><property name="owner" value="tt-forge-fe" /><property name="group" value="generality" /><property name="tags" value="{'model_name': 'pt_wideresnet_wide_resnet50_2_img_cls_torchvision', 'bringup_status': 'PASSED', 'pcc': 0.9960838099927942, 'atol': 1.431838035583496, 'execution_stage': 'PASSED'}" /><property name="config" value="{'compiler': {'enable_training': False, 'enable_recompute': False, 'match_subgraph_patterns': None, 'enable_consteval': True, 'compile_subgraphs': False, 'enable_link_past_cache_ios': False, 'enable_pt2_fx_graph_link': False, 'compile_depth': 'FULL', 'enable_tvm_cpu_fallback': False, 'cpu_fallback_ops': ['embedding'], 'enable_tm_cpu_fallback': False, 'tm_cpu_fallback_max_depth': 10, 'enable_tvm_dropout': False, 'enable_tvm_unsupported_ops': False, 'enable_tvm_constant_prop': False, 'convert_framework_params_to_tvm': False, 'enable_xla_jax_convert': False, 'enable_tvm_jax_freeze_large_model': True, 'framework_model_output_names': [], 'tvm_constnat_prop_mask': [], 'compile_tvm_to_python': True, 'retain_tvm_python_files': False, 'tvm_graph_store_path': '', 'tvm_graph_load_path': '', 'tvm_module_to_num_patterns': {}, 'extract_tvm_unique_ops_config': False, 'tvm_generate_unique_ops_tests': False, 'export_tvm_unique_ops_config_details': False, 'loopback_outputs': {}, 'default_df_override': None, 'default_accumulate_df': None, 'enable_broadcast_splitting': False, 'default_math_fidelity': 'HiFi3', 'amp_level': None, 'fracture_groups': [], 'amp_properties': []}, 'verify': {'enabled': True, 'verify_size': True, 'verify_dtype': True, 'verify_shape': True, 'verify_values': True, 'value_checker': {'rtol': 1e-05, 'atol': 1e-08, 'pcc': 0.99, 'dissimilarity_threshold': 0.001}, 'dump_tensors': False, 'dump_tensors_path': ''}}" /><property name="end_timestamp" value="2025-03-31T00:49:44" /></properties></testcase><testcase classname="forge.test.models.pytorch.vision.xception.test_xception" name="test_xception_timm[xception65]" time="0.102"><properties><property name="start_timestamp" value="2025-03-31T00:49:44" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:49:44" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/xception/test_xception.py:57: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.yolo.test_yolo_v3" name="test_yolov3_tiny_holli_pytorch" time="0.000"><skipped type="pytest.skip" message="dependent on CCM repo">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/yolo/test_yolo_v3.py:36: dependent on CCM repo</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.yolo.test_yolo_v5" name="test_yolov5_320x320[yolov5m]" time="0.101"><properties><property name="start_timestamp" value="2025-03-31T00:49:44" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:49:44" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/yolo/test_yolo_v5.py:39: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.yolo.test_yolo_v5" name="test_yolov5_640x640[yolov5l]" time="0.101"><properties><property name="start_timestamp" value="2025-03-31T00:49:45" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:49:45" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/yolo/test_yolo_v5.py:99: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.yolo.test_yolo_v5" name="test_yolov5_480x480[yolov5l]" time="0.101"><properties><property name="start_timestamp" value="2025-03-31T00:49:45" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:49:45" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/yolo/test_yolo_v5.py:158: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.yolo.test_yolo_v6" name="test_yolo_v6_pytorch[yolov6m]" time="0.101"><properties><property name="start_timestamp" value="2025-03-31T00:49:45" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:49:45" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/yolo/test_yolo_v6.py:39: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.yolo.test_yolox" name="test_yolox_pytorch[yolox_tiny]" time="0.102"><properties><property name="start_timestamp" value="2025-03-31T00:49:45" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:49:45" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/yolo/test_yolox.py:51: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.pytorch.vision.yolo.test_yolox" name="test_yolox_pytorch[yolox_l]" time="0.101"><properties><property name="start_timestamp" value="2025-03-31T00:49:45" /><property name="owner" value="tt-forge-fe" /><property name="tags" value="{'bringup_status': 'CI_FAILURE'}" /><property name="end_timestamp" value="2025-03-31T00:49:45" /></properties><skipped type="pytest.skip" message="Skipping due to the current CI/CD pipeline limitations">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/pytorch/vision/yolo/test_yolox.py:51: Skipping due to the current CI/CD pipeline limitations</skipped></testcase><testcase classname="forge.test.models.onnx.text.minilm.test_minilm" name="test_minilm_sequence_classification_onnx[17-sentence-transformers/all-MiniLM-L6-v2]" time="56.912"><properties><property name="start_timestamp" value="2025-03-31T00:49:45" /><property name="owner" value="tt-forge-fe" /><property name="group" value="generality" /><property name="tags" value="{'model_name': 'onnx_minilm_sentence_transformers_all_minilm_l6_v2_seq_cls_hf', 'bringup_status': 'PASSED', 'pcc': 0.9995202938103642, 'atol': 0.07339715957641602, 'execution_stage': 'PASSED'}" /><property name="config" value="{'compiler': {'enable_training': False, 'enable_recompute': False, 'match_subgraph_patterns': None, 'enable_consteval': True, 'compile_subgraphs': False, 'enable_link_past_cache_ios': False, 'enable_pt2_fx_graph_link': False, 'compile_depth': 'FULL', 'enable_tvm_cpu_fallback': False, 'cpu_fallback_ops': ['embedding'], 'enable_tm_cpu_fallback': False, 'tm_cpu_fallback_max_depth': 10, 'enable_tvm_dropout': False, 'enable_tvm_unsupported_ops': False, 'enable_tvm_constant_prop': False, 'convert_framework_params_to_tvm': False, 'enable_xla_jax_convert': False, 'enable_tvm_jax_freeze_large_model': True, 'framework_model_output_names': [], 'tvm_constnat_prop_mask': [], 'compile_tvm_to_python': True, 'retain_tvm_python_files': False, 'tvm_graph_store_path': '', 'tvm_graph_load_path': '', 'tvm_module_to_num_patterns': {}, 'extract_tvm_unique_ops_config': False, 'tvm_generate_unique_ops_tests': False, 'export_tvm_unique_ops_config_details': False, 'loopback_outputs': {}, 'default_df_override': None, 'default_accumulate_df': None, 'enable_broadcast_splitting': False, 'default_math_fidelity': 'HiFi3', 'amp_level': None, 'fracture_groups': [], 'amp_properties': []}, 'verify': {'enabled': True, 'verify_size': True, 'verify_dtype': True, 'verify_shape': True, 'verify_values': True, 'value_checker': {'rtol': 1e-05, 'atol': 1e-08, 'pcc': 0.99, 'dissimilarity_threshold': 0.001}, 'dump_tensors': False, 'dump_tensors_path': ''}}" /><property name="end_timestamp" value="2025-03-31T00:50:42" /></properties></testcase><testcase classname="forge.test.models.onnx.vision.ddrnet.test_ddrnet" name="test_ddrnet[no_device-ddrnet23]" time="0.000"><skipped type="pytest.skip" message="Requires restructuring">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/onnx/vision/ddrnet/test_ddrnet.py:21: Requires restructuring</skipped></testcase><testcase classname="forge.test.models.onnx.vision.dla.test_dla" name="test_dla_onnx[no_device-dla46x_c]" time="0.000"><skipped type="pytest.skip" message="Requires restructuring">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/onnx/vision/dla/test_dla.py:33: Requires restructuring</skipped></testcase><testcase classname="forge.test.models.onnx.vision.dla.test_dla" name="test_dla_onnx[no_device-dla102x]" time="0.000"><skipped type="pytest.skip" message="Requires restructuring">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/onnx/vision/dla/test_dla.py:33: Requires restructuring</skipped></testcase><testcase classname="forge.test.models.onnx.vision.fpn.test_fpn" name="test_fpn_onnx[training-no_device]" time="0.000"><skipped type="pytest.skip" message="Requires restructuring">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/onnx/vision/fpn/test_fpn.py:15: Requires restructuring</skipped></testcase><testcase classname="forge.test.models.onnx.vision.hardnet.test_hardnet" name="test_hardnet_onnx[no_device-hardnet68]" time="0.000"><skipped type="pytest.skip" message="Requires restructuring">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/onnx/vision/hardnet/test_hardnet.py:20: Requires restructuring</skipped></testcase><testcase classname="forge.test.models.onnx.vision.lstm.test_lstm_valence" name="test_lstm_valence_onnx[no_device]" time="0.000"><skipped type="pytest.skip" message="Requires restructuring">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/onnx/vision/lstm/test_lstm_valence.py:18: Requires restructuring</skipped></testcase><testcase classname="forge.test.models.onnx.vision.perceiverio.test_perceiverio" name="test_perceiver_for_image_classification_onnx[no_device-deepmind/vision-perceiver-conv]" time="0.000"><skipped type="pytest.skip" message="Requires restructuring">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/onnx/vision/perceiverio/test_perceiverio.py:29: Requires restructuring</skipped></testcase><testcase classname="forge.test.models.onnx.vision.retinanet.test_retinanet" name="test_retinanet_r101_640x480_onnx[no_device]" time="0.000"><skipped type="pytest.skip" message="Requires restructuring">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/onnx/vision/retinanet/test_retinanet.py:54: Requires restructuring</skipped></testcase><testcase classname="forge.test.models.onnx.vision.retinanet.test_retinanet" name="test_retinanet_onnx[no_device-retinanet_rn152fpn]" time="0.001"><skipped type="pytest.skip" message="Requires restructuring">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/onnx/vision/retinanet/test_retinanet.py:111: Requires restructuring</skipped></testcase><testcase classname="forge.test.models.onnx.vision.segformer.test_segformer_imgcls" name="test_segformer_image_classification_onnx[no_device-nvidia/mit-b2]" time="0.000"><skipped type="pytest.skip" message="Requires restructuring">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/onnx/vision/segformer/test_segformer_imgcls.py:37: Requires restructuring</skipped></testcase><testcase classname="forge.test.models.onnx.vision.segformer.test_segformer_semseg" name="test_segformer_semantic_segmentation_onnx[no_device-nvidia/segformer-b3-finetuned-ade-512-512]" time="0.000"><skipped type="pytest.skip" message="Requires restructuring">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/onnx/vision/segformer/test_segformer_semseg.py:37: Requires restructuring</skipped></testcase><testcase classname="forge.test.models.onnx.vision.yolo.test_yolo_v5" name="test_yolo_v5_320x320_onnx[no_device-yolov5l]" time="0.000"><skipped type="pytest.skip" message="Requires restructuring">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/onnx/vision/yolo/test_yolo_v5.py:24: Requires restructuring</skipped></testcase><testcase classname="forge.test.models.onnx.vision.yolo.test_yolo_v5" name="test_yolo_v5_320x320_onnx[no_device-yolov5x]" time="0.000"><skipped type="pytest.skip" message="Requires restructuring">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/onnx/vision/yolo/test_yolo_v5.py:24: Requires restructuring</skipped></testcase><testcase classname="forge.test.models.onnx.vision.yolo.test_yolo_v5" name="test_yolo_v5_480x480_onnx[no_device-yolov5s]" time="0.000"><skipped type="pytest.skip" message="Requires restructuring">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/onnx/vision/yolo/test_yolo_v5.py:65: Requires restructuring</skipped></testcase><testcase classname="forge.test.models.onnx.vision.yolo.test_yolo_v5" name="test_yolo_v5_640x640_onnx[no_device-yolov5n]" time="0.000"><skipped type="pytest.skip" message="Requires restructuring">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/onnx/vision/yolo/test_yolo_v5.py:107: Requires restructuring</skipped></testcase><testcase classname="forge.test.models.onnx.vision.yolo.test_yolo_x" name="test_yolox_onnx[no_device-yolox_s]" time="0.000"><skipped type="pytest.skip" message="Requires restructuring">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/onnx/vision/yolo/test_yolo_x.py:43: Requires restructuring</skipped></testcase><testcase classname="forge.test.models.onnx.vision.yolo.test_yolo_x" name="test_yolox_onnx[no_device-yolox_darknet]" time="0.001"><skipped type="pytest.skip" message="Requires restructuring">/__w/tt-forge-fe/tt-forge-fe/forge/test/models/onnx/vision/yolo/test_yolo_x.py:43: Requires restructuring</skipped></testcase><testcase classname="forge.test.mlir.llama.tests.test_llama_prefil" name="test_llama_prefil_on_device_decode_on_cpu[meta-llama/Llama-3.2-1B]" time="152.682"><properties><property name="start_timestamp" value="2025-03-31T00:50:42" /><property name="owner" value="tt-forge-fe" /><property name="group" value="red" /><property name="tags" value="{'model_name': 'pt_llama_3_2_1b_text_gen_hf', 'bringup_status': 'PASSED', 'pcc': 0.9993662909105359, 'atol': 0.5175151824951172, 'execution_stage': 'PASSED'}" /><property name="config" value="{'compiler': {'enable_training': False, 'enable_recompute': False, 'match_subgraph_patterns': None, 'enable_consteval': True, 'compile_subgraphs': False, 'enable_link_past_cache_ios': False, 'enable_pt2_fx_graph_link': False, 'compile_depth': 'FULL', 'enable_tvm_cpu_fallback': False, 'cpu_fallback_ops': ['embedding'], 'enable_tm_cpu_fallback': False, 'tm_cpu_fallback_max_depth': 10, 'enable_tvm_dropout': False, 'enable_tvm_unsupported_ops': False, 'enable_tvm_constant_prop': False, 'convert_framework_params_to_tvm': False, 'enable_xla_jax_convert': False, 'enable_tvm_jax_freeze_large_model': True, 'framework_model_output_names': [], 'tvm_constnat_prop_mask': [], 'compile_tvm_to_python': True, 'retain_tvm_python_files': False, 'tvm_graph_store_path': '', 'tvm_graph_load_path': '', 'tvm_module_to_num_patterns': {}, 'extract_tvm_unique_ops_config': False, 'tvm_generate_unique_ops_tests': False, 'export_tvm_unique_ops_config_details': False, 'loopback_outputs': {}, 'default_df_override': None, 'default_accumulate_df': None, 'enable_broadcast_splitting': False, 'default_math_fidelity': 'HiFi3', 'amp_level': None, 'fracture_groups': [], 'amp_properties': []}, 'verify': {'enabled': True, 'verify_size': True, 'verify_dtype': True, 'verify_shape': True, 'verify_values': True, 'value_checker': {'rtol': 1e-05, 'atol': 1e-08, 'pcc': 0.99, 'dissimilarity_threshold': 0.001}, 'dump_tensors': False, 'dump_tensors_path': ''}}" /><property name="end_timestamp" value="2025-03-31T00:53:15" /></properties></testcase></testsuite></testsuites>
