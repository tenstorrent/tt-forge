FROM ubuntu:22.04

SHELL ["/bin/bash", "-c"]

# Define build arguments for custom artifacts
# ARG TT_FORGE_FE_ARTIFACT_PATH
ARG TT_TORCH_ARTIFACT_PATH
# ARG TT_XLA_ARTIFACT_PATH

# Install system tools
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    curl \
    wget \
    jq \
    git \
    vim \
    nano \
    ca-certificates \
    sudo \
    ssh \
    python3.10 \
    python3.10-venv \
    python3.10-dev \
    python3-pip && \
    # Make Python 3.10 the default
    update-alternatives --install /usr/bin/python python /usr/bin/python3.10 1 && \
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 1

# Install system dependencies
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    build-essential \
    libnuma1 && \
    wget "https://github.com/dmakoviichuk-tt/mpi-ulfm/releases/download/v5.0.7-ulfm/openmpi-ulfm_5.0.7-1_amd64.deb" -O "mpi.deb" && \
    apt install -y "./mpi.deb" && \
    rm -f "mpi.deb"

# Create forge user and home directory
RUN useradd -m -s /bin/bash forge && \
echo "forge ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/forge && \
chmod 0440 /etc/sudoers.d/forge

# Set working directory
WORKDIR /home/forge

# Switch to forge user for remaining operations
USER forge

# is TT_TORCH_ARTIFACT_PATH is set COPY wheels folder from host
COPY wheels wheels

# Create and activate virtual environment for tt-torch, install whl
RUN FRONTEND=tt-torch && \
    python -m venv venv-$FRONTEND && \
    source venv-$FRONTEND/bin/activate && \
    if [ -d "${TT_TORCH_ARTIFACT_PATH}" ]; then \
        echo "Installing tt-torch from artifacts in ${TT_TORCH_ARTIFACT_PATH}" && \
        pip install $TT_TORCH_ARTIFACT_PATH/*.whl && \
    else \
        echo "Installing latest tt-torch from PyPI" && \
        pip install --pre --extra-index-url https://pypi.eng.aws.tenstorrent.com/ tt-torch; \
    fi && \
    pip cache purge && rm -rf ~/.cache/pip

# Create and activate virtual environment for tt-forge-fe, install whl
RUN FRONTEND=tt-forge-fe && \
    python -m venv venv-$FRONTEND && \
    source venv-$FRONTEND/bin/activate && \
    # WHL_VERSION=$(pip index versions $FRONTEND -i https://pypi.eng.aws.tenstorrent.com --pre 2>/dev/null | grep -oP 'Available versions: \K.*' | tr -d ' ' | cut -d',' -f1) && \
    # pip install https://pypi.eng.aws.tenstorrent.com/tt-forge-fe/tt_forge_fe-$WHL_VERSION-cp310-cp310-linux_x86_64.whl && \
    # pip install https://pypi.eng.aws.tenstorrent.com/tt-tvm/tt_tvm-$WHL_VERSION-cp310-cp310-linux_x86_64.whl && \
    pip install --pre --extra-index-url https://pypi.eng.aws.tenstorrent.com/ tt-forge-fe && \
    pip install --pre --extra-index-url https://pypi.eng.aws.tenstorrent.com/ tt-tvm && \
    pip cache purge && rm -rf ~/.cache/pip

# Create and activate virtual environment for tt-xla, install whl
RUN FRONTEND=tt-xla && \
    python -m venv venv-$FRONTEND && \
    source venv-$FRONTEND/bin/activate && \
    # WHL_VERSION=$(pip index versions pjrt-plugin-tt -i https://pypi.eng.aws.tenstorrent.com --pre 2>/dev/null | grep -oP 'Available versions: \K.*' | tr -d ' ' | cut -d',' -f1) && \
    # pip install https://pypi.eng.aws.tenstorrent.com/pjrt-plugin-tt/pjrt_plugin_tt-$WHL_VERSION-py3-none-linux_x86_64.whl && \
    pip install --pre --extra-index-url https://pypi.eng.aws.tenstorrent.com/ pjrt-plugin-tt && \
    pip cache purge && rm -rf ~/.cache/pip

CMD ["/bin/bash"]
